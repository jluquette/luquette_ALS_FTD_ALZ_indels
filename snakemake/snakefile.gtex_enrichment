# vim: syntax=python

########################################################################
# GTEx gene expression levels
#    This analysis is run for 4 levels of minimum signal coverage:
#    20%, 40%, 60% and 80%. We do this because we found that intergenic
#    regions do NOT have similar levels of mutation enrichment as lowly
#    expressed genes, which one might assume.
#    This complicates the multiple-resolution analysis because intergenic
#    and 0 expression are distinct states.
#
#    Unfortunately, I don't know of a way to make Snakemake run this
#    same module 4 times for each min coverage level, so copy paste
#    it is.
########################################################################

# Min. signal coverage: _mc02
enrichment_gtex_expression_mc02_config = dict(
    **{ 'output_dir': 'enrichment/gtex_expression_mc02',
        'SIGNAL_MANIFEST': 'manifests/GTEX_EXPRESSION.MANIFEST' },
    **enrichment_config
)

module enrichment_gtex_expression_mc02:
    snakefile: "snakefile.enrichment"
    config: enrichment_gtex_expression_mc02_config

use rule * from enrichment_gtex_expression_mc02 as enrichment_gtex_expression_mc02_*

use rule make_qbed_from_bigwig from enrichment_gtex_expression_mc02 as enrichment_gtex_expression_mc02_make_qbed_from_bigwig with:
    params:
        **enrichment_gtex_expression_mc02.make_qbed_from_bigwig_params(0.2)

use rule enrichment_plot from enrichment_gtex_expression_mc02 as enrichment_gtex_expression_mc02_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='datasource',
        highlight='group=Brain'
    output:
        expand('enrichment/gtex_expression_mc02/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/gtex_expression_mc02/quantile/{mutclass}.{nquantiles}quantiles.log'

# Min. signal coverage: _mc04
enrichment_gtex_expression_mc04_config = dict(
    **{ 'output_dir': 'enrichment/gtex_expression_mc04',
        'SIGNAL_MANIFEST': 'manifests/GTEX_EXPRESSION.MANIFEST' },
    **enrichment_config
)

module enrichment_gtex_expression_mc04:
    snakefile: "snakefile.enrichment"
    config: enrichment_gtex_expression_mc04_config

use rule * from enrichment_gtex_expression_mc04 as enrichment_gtex_expression_mc04_*

use rule make_qbed_from_bigwig from enrichment_gtex_expression_mc04 as enrichment_gtex_expression_mc04_make_qbed_from_bigwig with:
    params:
        **enrichment_gtex_expression_mc04.make_qbed_from_bigwig_params(0.4)

use rule enrichment_plot from enrichment_gtex_expression_mc04 as enrichment_gtex_expression_mc04_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='datasource',
        highlight='group=Brain'
    output:
        expand('enrichment/gtex_expression_mc04/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/gtex_expression_mc04/quantile/{mutclass}.{nquantiles}quantiles.log'

# Min. signal coverage: _mc06
enrichment_gtex_expression_mc06_config = dict(
    **{ 'output_dir': 'enrichment/gtex_expression_mc06',
        'SIGNAL_MANIFEST': 'manifests/GTEX_EXPRESSION.MANIFEST' },
    **enrichment_config
)

module enrichment_gtex_expression_mc06:
    snakefile: "snakefile.enrichment"
    config: enrichment_gtex_expression_mc06_config

use rule * from enrichment_gtex_expression_mc06 as enrichment_gtex_expression_mc06_*

use rule make_qbed_from_bigwig from enrichment_gtex_expression_mc06 as enrichment_gtex_expression_mc06_make_qbed_from_bigwig with:
    params:
        **enrichment_gtex_expression_mc06.make_qbed_from_bigwig_params(0.6)

use rule enrichment_plot from enrichment_gtex_expression_mc06 as enrichment_gtex_expression_mc06_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='datasource',
        highlight='group=Brain'
    output:
        expand('enrichment/gtex_expression_mc06/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/gtex_expression_mc06/quantile/{mutclass}.{nquantiles}quantiles.log'

# Min. signal coverage: _mc08
enrichment_gtex_expression_mc08_config = dict(
    **{ 'output_dir': 'enrichment/gtex_expression_mc08',
        'SIGNAL_MANIFEST': 'manifests/GTEX_EXPRESSION.MANIFEST' },
    **enrichment_config
)

module enrichment_gtex_expression_mc08:
    snakefile: "snakefile.enrichment"
    config: enrichment_gtex_expression_mc08_config

use rule * from enrichment_gtex_expression_mc08 as enrichment_gtex_expression_mc08_*

use rule make_qbed_from_bigwig from enrichment_gtex_expression_mc08 as enrichment_gtex_expression_mc08_make_qbed_from_bigwig with:
    params:
        **enrichment_gtex_expression_mc08.make_qbed_from_bigwig_params(0.8)

use rule enrichment_plot from enrichment_gtex_expression_mc08 as enrichment_gtex_expression_mc08_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='datasource',
        highlight='group=Brain'
    output:
        expand('enrichment/gtex_expression_mc08/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/gtex_expression_mc08/quantile/{mutclass}.{nquantiles}quantiles.log'

