# vim: syntax=python


# >6.0 is required for modules
from snakemake.utils import min_version
min_version("6.0")

import pandas as pd

chrs = [ x for x in range(1, 23) ]   # Chromosomes to analyze (autosomes)
output_plot_and_table = [ 'svg', 'pdf', 'tsv' ]  # Common plot+table output

# Read in the input manifest
manifest = pd.read_csv('manifests/INPUT_MANIFEST',
    sep='\t',comment='#')
celltypes = set(manifest['celltype'])
qualtypes = set(manifest['qualtype'])
celltypes_to_compute = [ 'neuron', 'oligo' ]
snv_qualtypes = [ 'A', 'AB' ]
indel_qualtypes = [ 'indel_A', 'indel_AB' ]
all_qualtypes = snv_qualtypes + indel_qualtypes


binsizes = [ '1000', '10000', '100000', '1000000' ]
qsizes = [ 3, 5, 10 ]


import yaml

with open('metadata/scan2_objects.yaml') as yf:
    scan2_objects = yaml.load(yf, Loader=yaml.FullLoader)


# Constant config variables for the enrichment pipeline

enrichment_config = {
    # The output directory and signal files are the only parameters that should
    # change between analyses.
    #'output_dir': 'path/to/output',
    #'SIGNAL_MANIFEST': 'path/to/sig.csv',

    # These parameters should not change between analyses
    'qbed_from_bigwig_script': 'snakemake/scripts/make_qbed_from_bigwig.sh',
    'MUT_MANIFEST': 'manifests/MUTATION_MANIFEST',
    'quantiles': qsizes,
    # must match binsizes
    'tiles': {
        '1000000': 'alignability/genome_tiles/genome_tiles_1000000binsize.bed',
        '100000':  'alignability/genome_tiles/genome_tiles_100000binsize.bed',
        '10000':   'alignability/genome_tiles/genome_tiles_10000binsize.bed',
        '1000':    'alignability/genome_tiles/genome_tiles_1000binsize.bed'
    },
    'masks': {
        '1000000': 'alignability/genome_tiles/genome_mask_1000000binsize.bed',
        '100000':  'alignability/genome_tiles/genome_mask_100000binsize.bed',
        '10000':   'alignability/genome_tiles/genome_mask_10000binsize.bed',
        '1000':    'alignability/genome_tiles/genome_mask_1000binsize.bed'
    },
    'mut_to_perm': {
        'neuron___A': 'input/neuron___perm___A.rda',
        'neuron___AB': 'input/neuron___perm___AB.rda',
        'neuron___indel_A': 'input/neuron___perm___indel_A.rda',
        'neuron___indel_AB': 'input/neuron___perm___indel_AB.rda',
        'oligo___A': 'input/oligo___perm___A.rda',
        'oligo___AB': 'input/oligo___perm___AB.rda',
        'oligo___indel_A': 'input/oligo___perm___indel_A.rda',
        'oligo___indel_AB': 'input/oligo___perm___indel_AB.rda',
        'neuron_sbs1___A': 'input/neuron_sbs1___perm___A.rda',
        'neuron_sbs16___A': 'input/neuron_sbs16___perm___A.rda',
        'oligo_sbs1___A': 'input/oligo_sbs1___perm___A.rda',
        'oligo_sbs16___A': 'input/oligo_sbs16___perm___A.rda'
    }
}


wildcard_constraints:
    celltype='|'.join(celltypes),
    qualtype='|'.join(qualtypes),
    cosmic='cosmic_full|cosmic_reduced',
    panel_letter='a|b|c|d|e|f|g|h|i|j|k|l',
    tumor='[^\.]+',  # No longer need this -[^\.]'   # Tumor codes are formatted XXXX-YYYY 
    sig='sbs1|sbs16'  # for "simplified" analysis of sbs1 and sbs16 enrichment using CG:C>T and ATN:T>C rather than signature fitting
    #umap='atac|rna',
    #collapsed='|COLLAPSED.',


rule all:
    input:
        "fig1/panel_b_A.pdf",
        "fig1/panel_b_A_burdens.csv",
        "fig1/panel_b_A_model.csv",
        "fig1/panel_b_indel_A.pdf",
        "fig1/panel_b_indel_A_burdens.csv",
        "fig1/panel_b_indel_A_model.csv",
        "fig1/panel_c.pdf",
        "fig1/panel_c.csv",
        "fig1/panel_d.pdf",
        "fig1/panel_d.csv",
        "suppfig2/panel_a.pdf",     # Indel size dist'n
        "suppfig2/panel_a.csv",
        #"suppfig2/panel_b.pdf",     # Insertion/deletion separate vs. age
        "fig2/panel_a.pdf",
        "fig2/panel_a.csv",
        expand("fig2/panel_b___{celltype}___A.{ext}",
            celltype=[ 'neuron', 'oligo' ], ext=[ 'pdf', 'csv' ]),
        "fig2/panel_c_A.pdf",
        "fig2/panel_c_A.csv",
        "fig2/panel_d.pdf",
        "fig2/panel_d.svg",
        "fig2/panel_d_supplement.pdf",
        "fig2/panel_d_supplement.svg",
        "fig2/panel_d_spectra.csv",
        "fig2/panel_d_exposures.csv",
        "fig2/panel_d_infant.pdf",
        "fig2/panel_d_infant.svg",
        "fig2/panel_d_spectra_infant.csv",
        "fig2/panel_d_exposures_infant.csv",
        "fig2/panel_e.pdf",
        "fig2/panel_e.csv",
        expand("fig2/panel_f___{celltype}___indel_A.{ext}",
            celltype=[ 'neuron', 'oligo' ], ext=[ 'pdf', 'csv' ]),
        "fig2/panel_g_indel_A.pdf",
        "fig2/panel_g_indel_A.csv",
        #"fig3/panel_a.pdf",
        #"fig3/panel_a_umap_plot.pdf",
        #"fig3/panel_b.pdf",
        #"fig3/panel_b_umap_plot.pdf",
        #"fig3/panel_c.pdf",
        #"fig3/panel_c2.pdf",
        #"fig3/panel_d.pdf",
        "fig3/panel_e.pdf",
        "fig3/panel_e_supplement_3quantiles.pdf",
        "fig3/panel_e_supplement_5quantiles.pdf",
        "fig3/panel_e_supplement_10quantiles.pdf",
        #"fig4/panel_a.pdf",
        #"fig4/panel_b_barplot.pdf",
        #"fig4/panel_b_heatmap.pdf",
        #"fig4/panel_c.pdf",
        #"fig4/panel_d.pdf"


rule actually_all_but_skipping_now:
    input:
        # alignability
        expand("alignability/plots/chromosome_bin_classes_heatmap.{output}",
            output=['svg', 'pdf', 'jpeg']),
        expand("alignability/plots/chromosome_bin_classes_barplot.{output}",
            output=['svg', 'pdf']),
        expand('alignability/genome_tiles/genome_mask_{binsize}binsize.bed',
            binsize=[ '200' ] + binsizes),  # add in a 200bp tile set for ChromHMM
        # spatial sensitivity
        #expand('spatial_sensitivity/bed/{sample}.{binsize}binsize.bed',
            #sample=neuron_samples + oligo_samples,
            #binsize=binsizes),
        #expand("alignability/data_plots/chr{chr}.{resolution}.{output}",
            #chr=chrs, resolution=[ '1k', '10k', '100k', '1m' ],
            #output=['svg', 'pdf']),
        # 1b
        expand('fig1/distribution_analysis/{qualtype}_gene_classes.{collapsed}{output}',
            qualtype=snv_qualtypes,  # indels are always added
            collapsed=[ '', 'COLLAPSED.'],
            output=output_plot_and_table),
        # 1c
        expand("fig1/indel_size_analysis/indel_size.{output}",
            output=[ 'pdf', 'svg']),
        # 1d
        expand("fig1/snpeff_analysis/snpeff_analysis.{output}",
            output=output_plot_and_table),
        # 1e,f
        expand('fig1/aging_rate_analysis/{qualtype}.{output}',
            qualtype=[ 'A', 'indel_A' ],
            output=[ 'pdf', 'svg']),
        expand('fig1/aging_rate_analysis/{qualtype}_{table}.csv',
            qualtype=[ 'A', 'indel_A' ],
            table=[ 'burdens', 'model' ]),
        # 2a
        expand("fig2/raw_spectrum/snv_spectrum.{output}",
            output=output_plot_and_table),
        # 2b
        expand("fig2/cosmic_signature_inclusion/{celltype}_signature_scores_{qualtype}.csv",
            celltype=celltypes_to_compute,
            qualtype=[ 'A', 'indel_A' ]),
        # probably supplementary, related to fig2
        expand("fig2/cosmic_signature_inclusion/final_signature_selection_{qualtype}.{output}",
            qualtype=[ 'A', 'indel_A' ],
            output=[ 'pdf', 'svg', 'csv' ]),
        # 2b,f
        expand("fig2/cosmic_aging/{celltype}_barplots_{qualtype}.{output}",
            celltype=celltypes_to_compute,
            qualtype=[ 'A', 'indel_A' ],
            output=[ 'pdf', 'svg' ]),
        # 2c,g
        expand("fig2/cosmic_aging/scatterplots_{qualtype}.{output}",
            qualtype=[ 'A', 'indel_A' ],
            output=[ 'pdf', 'svg', 'csv' ]),
        # 2e
        expand("fig2/raw_spectrum/indel_spectrum.{output}",
            output=output_plot_and_table),
        # 3a
        expand("fig3/scrnaseq/umap_plot.{output}",
            output=[ 'svg', 'pdf', 'jpeg' ]),
        # 3b
        expand("fig3/scatacseq/umap_plot.{output}",
            output=[ 'svg', 'pdf', 'jpeg' ]),
        expand('enrichment/{datasource}/quantile/{celltype}___{qualtype}.{nquantiles}quantiles.{output}',
            celltype=celltypes_to_compute,
            qualtype=all_qualtypes,
            nquantiles=[ 5, 10 ],
            datasource=[ 'gtex_expression_mc' + x for x in [ '02', '04', '06', '08' ] ] +
                [ 'scrnaseq_expression_mc' + x for x in [ '02', '04', '06', '08' ] ] +
                [ 'nott', 'encode_replichip', 'repliseq', 'conservation', 'scatacseq', 'cancer_snvdens', 'roadmap_histone_signal_brain' ],
            #datasource=[ 'depth' ],
            output=[ 'svg', 'pdf', 'csv' ]),
        # Enrichment analysis, but not quantile based (qbeds)
        expand('enrichment/{datasource}/{celltype}___{qualtype}.{output}',
            celltype=celltypes_to_compute,
            qualtype=all_qualtypes,
            datasource=[ 'roadmap_chromhmm_brain' ], #, 'roadmap_histone_narrowpeak' ],
            output=[ 'svg', 'pdf', 'csv' ]),
        # Signature-based enrichment
        expand('enrichment/{datasource}/quantile/{celltype}___{qualtype}.{nquantiles}quantiles_sigenrich.{output}',
            #expand('enrichment/{datasource}/quantile/{celltype}___{qualtype}/{nquantiles}quantiles_sigenrich_adapted.csv',
            datasource=[ 'gtex_expression_mc' + x for x in [ '02', '04', '06', '08' ] ] +
                [ 'scrnaseq_expression_mc' + x for x in [ '02', '04', '06', '08' ] ] +
                [ 'nott', 'encode_replichip', 'repliseq', 'conservation', 'scatacseq', 'cancer_snvdens', 'roadmap_histone_signal_brain' ],
            #datasource=[ 'depth' ],
            celltype=celltypes_to_compute,
            qualtype=[ 'A', 'indel_A' ],
            nquantiles=[ 3, 5 ], #)
            output=[ 'svg', 'pdf', 'csv' ]),
        #expand('plots/enrichment/{datasource}/quantile/{celltype}___{qualtype}.{nquantiles}quantiles_sigenrich.{output}',
            #datasource=[ 'encode_replichip', 'roadmap_histone_signal', 'roadmap_dnamethyl', 'scatacseq', 'conservation', 'boca', 'depth', 'nott', 'rizzardi' ],
            #celltype=celltypes_to_compute,
            #qualtype=[ 'A' ],
            #nquantiles=[ 3, 5, 10 ],
            #output=[ 'svg', 'pdf', 'csv' ]),



include: "snakefile.data"
include: "snakefile.alignability"
include: "snakefile.fig1"
include: "snakefile.fig2"
include: "snakefile.fig3"
include: "snakefile.fig4"
include: "snakefile.suppfig2"
include: "snakefile.scatacseq"
include: "snakefile.gtex_enrichment"
include: "snakefile.scrnaseq_enrichment"



# Below are several instances of
# boilerplate code to use the bed_enrichment module to automatically
# run arbitrary BED files through the enrichment pipeline.

########################################################################
# Gencode v26 gene region annotations (e.g., exon, intron, UTR..)
########################################################################
enrichment_gencode_gene_regions_config = dict(
    **{ 'output_dir': 'enrichment/gencode',
        'SIGNAL_MANIFEST': 'manifests/GENCODE.MANIFEST' },
    **enrichment_config
)

module enrichment_gencode_gene_regions:
    snakefile: "snakefile.bed_enrichment"
    config: enrichment_gencode_gene_regions_config

use rule * from enrichment_gencode_gene_regions as enrichment_gencode_gene_regions_*

use rule enrichment_bed_plot from enrichment_gencode_gene_regions as enrichment_gencode_gene_regions_enrichment_bed_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
    output:
        expand('enrichment/gencode/bed_regions/{{mutclass}}.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/gencode/{mutclass}___gene_regions.log'

# Additional analysis that collapses several small regions into larger
# ones to improve power.
#
# XXX: this should just be a new BED file in the manifest
# XXX2: this rule does not match when celltype=neuron. wildcard constraints is
# celltype=oligo|neuron|any or any reordering of that
rule gencode_gene_regions_collapsed:
    input:
        rda="enrichment/gencode/bed_regions/{celltype}___{qualtype}/bedenrich/FULL.rda"
    output:
        fullrda="enrichment/gencode/bed_regions/{celltype}___{qualtype}/bedenrich/FULL.COLLAPSED.rda",
        rda="enrichment/gencode/bed_regions/{celltype}___{qualtype}/bedenrich/SUMMARY.COLLAPSED.rda"
    params:
        "Exonic=cds,utr3,utr5",
        "Intronic=intron",
        "Intergenic=intergenic,downstream,upstream",
        "Other=other",
        "Outside=outside"
    resources:
        mem=4000
    log:
        "enrichment/gencode/bed_regions/{celltype}___{qualtype}/bedenrich/COLLAPSED.log"
    script:
        "scripts/collapse_enrichment.R"

# XXX2: hack for now to get celltype=neuron to work
rule gencode_gene_regions_collapsed_neuron:
    input:
        rda="enrichment/gencode/bed_regions/neuron___{qualtype}/bedenrich/FULL.rda"
    output:
        fullrda="enrichment/gencode/bed_regions/neuron___{qualtype}/bedenrich/FULL.COLLAPSED.rda",
        rda="enrichment/gencode/bed_regions/neuron___{qualtype}/bedenrich/SUMMARY.COLLAPSED.rda"
    params:
        "Exonic=cds,utr3,utr5",
        "Intronic=intron",
        "Intergenic=intergenic,downstream,upstream",
        "Other=other",
        "Outside=outside"
    resources:
        mem=4000
    log:
        "enrichment/gencode/bed_regions/neuron___{qualtype}/bedenrich/COLLAPSED.log"
    script:
        "scripts/collapse_enrichment.R"


########################################################################
# Roadmap epigenomics chromHMM  state models
########################################################################
enrichment_roadmap_chromhmm_config = dict(
    **{ 'output_dir': 'enrichment/roadmap_chromhmm_brain',
        'SIGNAL_MANIFEST': 'manifests/ROADMAP_CHROMHMM_BRAIN.MANIFEST' },
    **enrichment_config
)

module enrichment_roadmap_chromhmm:
    snakefile: "snakefile.bed_enrichment"
    config: enrichment_roadmap_chromhmm_config

use rule * from enrichment_roadmap_chromhmm as enrichment_roadmap_chromhmm_*

# Uses 200 bp tiles and has >200 tracks, so give it a generous amount of RAM
# N.B. failed with 32G after 1 hour of loading BED files
# Max usage was ~37G.
use rule enrichment_bed_analysis from enrichment_roadmap_chromhmm as enrichment_roadmap_chromhmm_enrichment_bed_analysis with:
    resources:
        mem=42000

use rule enrichment_bed_plot from enrichment_roadmap_chromhmm as enrichment_roadmap_chromhmm_enrichment_bed_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        xlab='eid',
        xgroup='quantile',
        ygroup='model',
        highlight='eid=E073'
    output:
        expand('enrichment/roadmap_chromhmm_brain/{{mutclass}}.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/roadmap_chromhmm_brain/{mutclass}.log'


# Below are several instances of
# boilerplate code to use the enrichment module to automatically
# run bigWig signal files through the enrichment pipeline.

########################################################################
# Roadmap epigenomics histones
########################################################################
enrichment_roadmap_histone_signal_config = dict(
    **{ 'output_dir': 'enrichment/roadmap_histone_signal_brain',
        'SIGNAL_MANIFEST': 'manifests/ROADMAP_HISTONE_BIGWIG_BRAIN.MANIFEST' },
    **enrichment_config
)

module enrichment_roadmap_histone_signal:
    snakefile: "snakefile.enrichment"
    config: enrichment_roadmap_histone_signal_config

use rule * from enrichment_roadmap_histone_signal as enrichment_roadmap_histone_signal_*

use rule sigenrichment_qbed_analysis from enrichment_roadmap_histone_signal as enrichment_roadmap_histone_signal_sigenrichment_qbed_analysis with:
    resources:
        mem=lambda wildcards: 96000 if wildcards.binsize == '1000' or wildcards.nquantiles == '50' else 30000

use rule enrichment_plot from enrichment_roadmap_histone_signal as enrichment_roadmap_histone_signal_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='mark'
    output:
        expand('enrichment/roadmap_histone_signal_brain/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/roadmap_histone_signal_brain/quantile/{mutclass}.{nquantiles}quantiles.log'


use rule sigenrichment_plot from enrichment_roadmap_histone_signal as enrichment_roadmap_histone_signal_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='mark'
    output:
        expand('enrichment/roadmap_histone_signal_brain/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/roadmap_histone_signal_brain/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'


########################################################################
# ENCODE replication timing measured by Repli-chip
########################################################################
enrichment_encode_replichip_config = dict(
    **{ 'output_dir': 'enrichment/encode_replichip',
        'SIGNAL_MANIFEST': 'manifests/ENCODE_REPLICHIP.MANIFEST' },
    **enrichment_config
)

module enrichment_encode_replichip:
    snakefile: "snakefile.enrichment"
    config: enrichment_encode_replichip_config

use rule * from enrichment_encode_replichip as enrichment_encode_replichip_*

use rule sigenrichment_qbed_analysis from enrichment_encode_replichip as enrichment_encode_replichip_sigenrichment_qbed_analysis with:
    resources:
        mem=lambda wildcards: 70000 if wildcards.binsize == '1000' or wildcards.nquantiles == '50' else 30000

use rule enrichment_plot from enrichment_encode_replichip as enrichment_encode_replichip_enrichment_plot with:
    params:
        ignore='BINSIZE=1000',
        group='datasource'
    output:
        expand('enrichment/encode_replichip/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/encode_replichip/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_encode_replichip as enrichment_encode_replichip_sigenrichment_plot with:
    params:
        ignore='BINSIZE=1000',
        group='datasource'
    output:
        expand('enrichment/encode_replichip/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/encode_replichip/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'


########################################################################
# Replication timing measured by Repliseq
########################################################################
enrichment_repliseq_config = dict(
    **{ 'output_dir': 'enrichment/repliseq',
        'SIGNAL_MANIFEST': 'manifests/REPLISEQ.MANIFEST' },
    **enrichment_config
)

module enrichment_repliseq:
    snakefile: "snakefile.enrichment"
    config: enrichment_repliseq_config

use rule * from enrichment_repliseq as enrichment_repliseq_*

use rule sigenrichment_qbed_analysis from enrichment_repliseq as enrichment_repliseq_sigenrichment_qbed_analysis with:
    resources:
        mem=lambda wildcards: 70000 if wildcards.binsize == '1000' or wildcards.nquantiles == '50' else 30000

use rule enrichment_plot from enrichment_repliseq as enrichment_repliseq_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='datasource'
    output:
        expand('enrichment/repliseq/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/repliseq/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_repliseq as enrichment_repliseq_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='datasource'
    output:
        expand('enrichment/repliseq/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/repliseq/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'


########################################################################
# Conservation tracks from UCSC
########################################################################
enrichment_conservation_config = dict(
    **{ 'output_dir': 'enrichment/conservation',
        'SIGNAL_MANIFEST': 'manifests/CONSERVATION.MANIFEST' },
    **enrichment_config
)

module enrichment_conservation:
    snakefile: "snakefile.enrichment"
    config: enrichment_conservation_config

use rule * from enrichment_conservation as enrichment_conservation_*

# Conservation tracks have bp resolution over the entire genome. This
# causes bigWigAverageOverBed to consume unbelievably large amounts of
# memory for large windows like 1MB.
use rule make_qbed_from_bigwig from enrichment_conservation as enrichment_conservation_make_qbed_from_bigwig with:
    resources:
        mem=65000

use rule enrichment_plot from enrichment_conservation as enrichment_conservation_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='track'
    output:
        expand('enrichment/conservation/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/conservation/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_conservation as enrichment_conservation_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='track'
    output:
        expand('enrichment/conservation/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/conservation/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'


########################################################################
# Nott et al histone ChIP-seq and ATAC-seq
########################################################################
enrichment_nott_config = dict(
    **{ 'output_dir': 'enrichment/nott',
        'SIGNAL_MANIFEST': 'manifests/NOTT.MANIFEST' },
    **enrichment_config
)

module enrichment_nott:
    snakefile: "snakefile.enrichment"
    config: enrichment_nott_config

use rule * from enrichment_nott  as enrichment_nott_*

use rule enrichment_plot from enrichment_nott as enrichment_nott_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='celltype,mark'
    output:
        expand('enrichment/nott/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/nott/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_nott as enrichment_nott_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='celltype,mark'
    output:
        expand('enrichment/nott/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/nott/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'




########################################################################
# Our scATAC-seq data
########################################################################
enrichment_scatacseq_config = dict(
    **{ 'output_dir': 'enrichment/scatacseq',
        'SIGNAL_MANIFEST': 'manifests/SCATACSEQ.MANIFEST' },
    **enrichment_config
)

module enrichment_scatacseq:
    snakefile: "snakefile.enrichment"
    config: enrichment_scatacseq_config

use rule * from enrichment_scatacseq  as enrichment_scatacseq_*

use rule make_qbed_from_bigwig from enrichment_scatacseq as enrichment_scatacseq_make_qbed_from_bigwig with:
    resources:
        mem=15000

use rule enrichment_plot from enrichment_scatacseq as enrichment_scatacseq_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='celltype',
    output:
        expand('enrichment/scatacseq/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scatacseq/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_scatacseq as enrichment_scatacseq_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='celltype',
    output:
        expand('enrichment/scatacseq/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scatacseq/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'


########################################################################
# Our scATAC-seq data but using foldchange signals
#
# This differs from typical qbed analysis because there is no base
# bigwig signal files from which the qbeds are constructed. Instead,
# qbeds are created from the non-foldchange scATAC-seq qbeds.
########################################################################
enrichment_scatacseq_foldchange_config = dict(
    **{ 'output_dir': 'enrichment/scatacseq_foldchange',
        # This manifest is a dummy containing only metadata, not files
        'SIGNAL_MANIFEST': 'manifests/SCATACSEQ_FOLDCHANGE.MANIFEST' },
    **enrichment_config
)

module enrichment_scatacseq_foldchange:
    snakefile: "snakefile.enrichment"
    config: enrichment_scatacseq_foldchange_config

# Only qbed analysis is relevant
use rule enrichment_qbed_analysis from enrichment_scatacseq_foldchange as enrichment_scatacseq_foldchange_qbed_analysis

use rule enrichment_plot from enrichment_scatacseq_foldchange as enrichment_scatacseq_foldchange_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='celltype',
    output:
        expand('enrichment/scatacseq_foldchange/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scatacseq_foldchange/quantile/{mutclass}.{nquantiles}quantiles.log'


########################################################################
# Cancer SNV density
########################################################################
enrichment_cancer_config = dict(
    **{ 'output_dir': 'enrichment/cancer_snvdens',
        'SIGNAL_MANIFEST': 'manifests/CANCER_SNVDENS.MANIFEST' },
    **enrichment_config
)

module enrichment_cancer:
    snakefile: "snakefile.enrichment"
    config: enrichment_cancer_config

use rule * from enrichment_cancer as enrichment_cancer_*

use rule enrichment_plot from enrichment_cancer as enrichment_cancer_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='signal_type'
    output:
        expand('enrichment/cancer_snvdens/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/cancer_snvdens/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_cancer as enrichment_cancer_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='signal_type'
    output:
        expand('enrichment/cancer_snvdens/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/cancer_snvdens/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'
