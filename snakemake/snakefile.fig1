# vim: syntax=python


rule consolidate_genic_distribution:
    input:
        enrich_objects=lambda wildcards: "enrichment/{datasource}/bed_regions/{group}___" + config['muttype_to_passtype']['mda' if 'mda' in wildcards.group else 'pta'][wildcards.muttype] + "/bedenrich/SUMMARY{dot}{corrected}.rda"
    output:
        csv="fig1{underscore}{corrected}/panel_c_{datasource}_{group}___{muttype}.{corrected}{dot}csv"
    log:
        "fig1{underscore}{corrected}/panel_c_{datasource}_{group}___{muttype}.{corrected}{dot}log"
    params:
        group_tag='{group}',
        # mega hack: in snakemake we can't allow datasource=gencode because it's a substring of
        # another datasource, datasource=gencode_simplified.  however, the bedenrich analysis for
        # gencode_full already ran with datasource=gencode in the MANIFEST, and thus, also in
        # the BED file.  rather than wait for a few days for that (and all downstream sensitivity
        # analyses) to rerun, just use this hack in any case where a datasource value is specified
        # within snakemake.  datasources that are automatically determined from the files without
        # using a snakemake wildcard will work with no modification.
        signal=lambda wildcards: 'datasource=' + ('gencode' if wildcards.datasource == 'gencode_full' else wildcards.datasource),
        features=lambda wildcards: 'tx,utx' if wildcards.datasource == 'gtex' else ('upstream,utr5,cds,intron,utr3,downstream,intergenic,other' if wildcards.datasource == 'gencode_full' else "intergenic,intronic,exonic,other")   # "other" refers to transcripts without exons/introns
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    script:
        "scripts/consolidate_bed_enrichment_tables.R"


rule plot_genic_distribution:
    input:
        enrich_tables=expand('fig1{{underscore}}{{corrected}}/panel_c_{{datasource}}_{group}___{{muttype}}.{{corrected}}{{dot}}csv',
            group=[ 'pta_neuron', 'pta_oligo' ])
    output:
        svg="fig1{underscore}{corrected}/panel_c_{datasource}___{muttype}.{corrected}{dot}svg",
        pdf="fig1{underscore}{corrected}/panel_c_{datasource}___{muttype}.{corrected}{dot}pdf",
    params:
        colors=','.join([ config['group_colors'][g] for g in [ 'pta_neuron', 'pta_oligo' ] ])
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    log:
        "fig1{underscore}{corrected}/panel_c_{datasource}___{muttype}.{corrected}{dot}log"
    script:
        "scripts/barplot_enrich_new2.R"


rule plot_genic_distribution_all:
    input:
        enrich_tables=expand('fig1{{underscore}}{{corrected}}/panel_c_{{datasource}}_{group}___{{muttype}}.{{corrected}}{{dot}}csv',
            group=config['comparison_groups'])
    output:
        svg="fig1{underscore}{corrected}/panel_c_{datasource}_all_comparisons___{muttype}.{corrected}{dot}svg",
        pdf="fig1{underscore}{corrected}/panel_c_{datasource}_all_comparisons___{muttype}.{corrected}{dot}pdf",
    params:
        colors=','.join([ config['group_colors'][g] for g in config['comparison_groups'] ])
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    log:
        "fig1{underscore}{corrected}/panel_c_{datasource}_all_comparisons___{muttype}.{corrected}{dot}log"
    script:
        "scripts/barplot_enrich_new2.R"



rule plot_genic_distribution_pta_vs_mda:
    input:
        enrich_tables=expand('fig1{{underscore}}{{corrected}}/panel_c_{{datasource}}_{group}___{{muttype}}.{{corrected}}{{dot}}csv',
            group=[ 'pta_oligo', 'mda_sox10', 'mda_gfap' ])
    output:
        svg="suppfig2{underscore}{corrected}/panel_c_{datasource}_pta_vs_mda___{muttype}.{corrected}{dot}svg",
        pdf="suppfig2{underscore}{corrected}/panel_c_{datasource}_pta_vs_mda___{muttype}.{corrected}{dot}pdf",
    params:
        colors=','.join([ config['group_colors'][g] for g in [ 'pta_oligo', 'mda_sox10', 'mda_gfap' ] ])
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    log:
        "suppfig2{underscore}{corrected}/panel_c_{datasource}_pta_vs_mda___{muttype}.{corrected}{dot}log"
    script:
        "scripts/barplot_enrich_new2.R"


# Just a copyover of the default files
rule aging_rates_figure:
    input:
        svg="aging_rates/pta___mutburden_models___{qualtype}.svg",
        pdf="aging_rates/pta___mutburden_models___{qualtype}.pdf",
        models="aging_rates/pta___mutburden_models___{qualtype}.csv",
        mutburdens="aging_rates/pta___mutburden_combined___{qualtype}.csv"
    output:
        svg='fig1/panel_b_aging_rates_{qualtype}.svg',
        pdf='fig1/panel_b_aging_rates_{qualtype}.pdf',
        mutburdens='fig1/panel_b_aging_rates_{qualtype}_burdens.csv',
        models='fig1/panel_b_aging_rates_{qualtype}_model.csv'
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    log:
        'fig1/panel_b_aging_rates_{qualtype}.log'
    shell:
        """
        cp -n {input.svg} {output.svg}
        cp -n {input.pdf} {output.pdf}
        cp -n {input.models} {output.models}
        cp -n {input.mutburdens} {output.mutburdens}
        """


rule aging_rates_figure_mda:
    input:
        svg="aging_rates/all___mutburden_models___{qualtype}.svg",
        pdf="aging_rates/all___mutburden_models___{qualtype}.pdf",
        models="aging_rates/all___mutburden_models___{qualtype}.csv",
        mutburdens="aging_rates/all___mutburden_combined___{qualtype}.csv"
    output:
        svg='fig1/panel_b_aging_rates_all_comparisons_{qualtype}.svg',
        pdf='fig1/panel_b_aging_rates_all_comparisons_{qualtype}.pdf',
        mutburdens='fig1/panel_b_aging_rates_all_comparisons_{qualtype}_burdens.csv',
        models='fig1/panel_b_aging_rates_all_comparisons_{qualtype}_model.csv'
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    log:
        'fig1/panel_b_aging_rates_all_comparisons_{qualtype}.log'
    shell:
        """
        cp -n {input.svg} {output.svg}
        cp -n {input.pdf} {output.pdf}
        cp -n {input.models} {output.models}
        cp -n {input.mutburdens} {output.mutburdens}
        """


rule aging_rates_figure_batch1vs2:
    input:
        svg="aging_rates/batch1_vs_batch2___mutburden_models___{qualtype}.svg",
        pdf="aging_rates/batch1_vs_batch2___mutburden_models___{qualtype}.pdf",
        models="aging_rates/batch1_vs_batch2___mutburden_models___{qualtype}.csv",
        mutburdens="aging_rates/batch1_vs_batch2___mutburden_combined___{qualtype}.csv"
    output:
        svg='fig1/panel_b_aging_rates_batch1_vs_batch2_{qualtype}.svg',
        pdf='fig1/panel_b_aging_rates_batch1_vs_batch2_{qualtype}.pdf',
        mutburdens='fig1/panel_b_aging_rates_batch1_vs_batch2_{qualtype}_burdens.csv',
        models='fig1/panel_b_aging_rates_batch1_vs_batch2_{qualtype}_model.csv'
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    log:
        'fig1/panel_b_aging_rates_batch1_vs_batch2_{qualtype}.log'
    shell:
        """
        cp -n {input.svg} {output.svg}
        cp -n {input.pdf} {output.pdf}
        cp -n {input.models} {output.models}
        cp -n {input.mutburdens} {output.mutburdens}
        """


rule parse_snpeff:
    input:
        vcf=lambda wildcards: "snpeff/{group}___FILTERED___" + config['muttype_to_passtype']['mda' if 'mda' in wildcards.group else 'pta'][wildcards.muttype] + ".vcf"
    output:
        csv="fig1/panel_d_snpeff_{group}___{muttype}.csv"
    log:
        "fig1/panel_d_snpeff_{group}___{muttype}.log"
    params:
        group_tag="{group}"
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    script:
        "scripts/parse_snpeff_severity.R"


rule plot_snpeff:
    input:
        enrich_tables=expand('fig1/panel_d_snpeff_{group}___{{muttype}}.csv',
            group=[ 'pta_neuron', 'pta_oligo' ])
    output:
        svg="fig1/panel_d_snpeff___{muttype}.svg",
        pdf="fig1/panel_d_snpeff___{muttype}.pdf",
    log:
        "fig1/panel_d_snpeff___{muttype}.log"
    params:
        colors=','.join([ config['group_colors'][g] for g in [ 'pta_neuron', 'pta_oligo' ] ])
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    script:
        "scripts/barplot_enrich_new2_noscale.R"


rule plot_snpeff_all:
    input:
        enrich_tables=expand('fig1/panel_d_snpeff_{group}___{{muttype}}.csv',
            group=config['comparison_groups'])
    output:
        svg="fig1/panel_d_snpeff_all_comparisons___{muttype}.svg",
        pdf="fig1/panel_d_snpeff_all_comparisons___{muttype}.pdf",
    params:
        colors=','.join([ config['group_colors'][g] for g in config['comparison_groups'] ])
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    log:
        "fig1/panel_d_snpeff_all_comparisons___{muttype}.log"
    script:
        "scripts/barplot_enrich_new2_noscale.R"
