# vim: syntax=python

rule fig1_suppl_chromhmm:
    input:
        neuron_snv="enrichment/roadmap_chromhmm_brain/bed_regions/neuron___AB/bedenrich/SUMMARY.rda",
        neuron_indel="enrichment/roadmap_chromhmm_brain/bed_regions/neuron___indel_AB/bedenrich/SUMMARY.rda",
        oligo_snv="enrichment/roadmap_chromhmm_brain/bed_regions/oligo___AB/bedenrich/SUMMARY.rda",
        oligo_indel="enrichment/roadmap_chromhmm_brain/bed_regions/oligo___indel_AB/bedenrich/SUMMARY.rda"
    output:
        svg="fig1/suppl_chromhmm.svg",
        pdf="fig1/suppl_chromhmm.pdf",
        csv="fig1/suppl_chromhmm.csv"
    params:
        signal_to_plot='eid=E073',
        # 3_TssFlnk, 10_,11_,12_ (bivalent states) are all tiny genomic regions, creating
        # huge error bars that make the rest of the plot difficult to read.
        features="1_TssA,2_TssAFlnk,4_Tx,5_TxWk,6_EnhG,7_Enh,8_ZNF/Rpts,9_Het,13_ReprPC,14_ReprPCWk,15_Quies"
    resources:
        mem=1000
    log:
        "fig1/suppl_chromhmm.log"
    script:
        "scripts/barplot_enrich_new.R"


rule fig1_distribution_plot:
    input:
        nmut="enrichment/gencode/bed_regions/neuron___AB/bedenrich/FULL.COLLAPSED.rda",
        ni="enrichment/gencode/bed_regions/neuron___indel_AB/bedenrich/FULL.COLLAPSED.rda",
        gmut="enrichment/gencode/bed_regions/oligo___AB/bedenrich/FULL.COLLAPSED.rda",
        gi="enrichment/gencode/bed_regions/oligo___indel_AB/bedenrich/FULL.COLLAPSED.rda"
    output:
        svg="fig1/panel_c.svg",
        pdf="fig1/panel_c.pdf",
        tsv="fig1/panel_c.csv"
    resources:
        mem=4000
    log:
        "fig1/panel_c.log"
    script:
        "scripts/barplot_enrich_2x2.R"


rule fig1_distribution_plot_new:
    input:
        neuron_snv="enrichment/gencode/bed_regions/neuron___AB/bedenrich/SUMMARY.COLLAPSED.rda",
        neuron_indel="enrichment/gencode/bed_regions/neuron___indel_AB/bedenrich/SUMMARY.COLLAPSED.rda",
        oligo_snv="enrichment/gencode/bed_regions/oligo___AB/bedenrich/SUMMARY.COLLAPSED.rda",
        oligo_indel="enrichment/gencode/bed_regions/oligo___indel_AB/bedenrich/SUMMARY.COLLAPSED.rda"
    output:
        svg="fig1/panel_c_new.svg",
        pdf="fig1/panel_c_new.pdf",
        csv="fig1/panel_c_new.csv"
    params:
        signal_to_plot='dummy',
        features="Intergenic,Intronic,Exonic,Other"   # "other" is noncoding transcripts
    resources:
        mem=1000
    log:
        "fig1/panel_c_new.log"
    script:
        "scripts/barplot_enrich_new.R"


# only specify prevburdens for neurons, which refers to the 15 PTA
# neurons from UMBXXXX donors that did not have matched oligos and
# were thus not re-analyzed in this study.
def mut_burden_analysis_input(wildcards):
    d = { 'meta' : "input/{celltype}___meta___{qualtype}.csv",
          'objects' : scan2_objects[wildcards.celltype].values() }

    if wildcards.celltype == 'neuron':
        d['prevburdens'] = "scan2_paper_output/Collected_SCAN2_%s_burdens.csv" % ('sIndel' if wildcards.qualtype.startswith('indel_') else 'sSNV')
    return(d)


rule fig1_mut_burden_analysis:
    input:
        unpack(mut_burden_analysis_input)
    output:
        csv="aging_rates/{celltype}___mutburden___{qualtype}.csv"
    params:
        muttype=lambda wildcards: 'indel' if wildcards.qualtype.startswith('indel_') else 'snv',
    resources:
        mem=1000
    log:
        "aging_rates/{celltype}___mutburden___{qualtype}.log"
    script:
        "scripts/make_mutburden_tables.R"


rule fig1_aging_rate_analysis:
    input:
        neuron="aging_rates/neuron___mutburden___{qualtype}.csv",
        oligo="aging_rates/oligo___mutburden___{qualtype}.csv"
    output:
        svg='fig1/panel_b_{qualtype}.svg',
        pdf='fig1/panel_b_{qualtype}.pdf',
        tsv='fig1/panel_b_{qualtype}_burdens.csv',
        tsv2='fig1/panel_b_{qualtype}_model.csv'
    resources:
        mem=4000
    log:
        'fig1/panel_b_{qualtype}.log'
    script:
        "scripts/plot_aging.R"



rule fig1_run_snpeff:
    input:
        vcf="vcfs/{celltype}___mut___{qualtype}.vcf"
    output:
        vcf="snpeff/{celltype}___snpeff___{qualtype}.vcf"
    log:
        "snpeff/{celltype}___snpeff___{qualtype}.run_snpeff.log"
    resources:
        mem=8000
    shell:
        """
        snakemake/scripts/run_snpeff.sh \
            {input.vcf} {output.vcf} > {log} 2>&1
        """


rule fig1_snpeff_analysis:
    input:
        "snpeff/neuron___snpeff___AB.vcf",
        "snpeff/neuron___snpeff___indel_AB.vcf",
        "snpeff/oligo___snpeff___AB.vcf",
        "snpeff/oligo___snpeff___indel_AB.vcf"
    output:
        svg="fig1/panel_d.svg",
        pdf="fig1/panel_d.pdf",
        csv="fig1/panel_d.csv"
    resources:
        mem=4000
    log:
        "fig1/panel_d.log"
    script:
        "scripts/plot_snpeff.R"


rule fig1_suppl_genes:
    input:
        neuron="enrichment/gtex_genes/bed_regions/neuron___AB/bedenrich/SUMMARY.rda",
        oligo="enrichment/gtex_genes/bed_regions/oligo___AB/bedenrich/SUMMARY.rda"
    output:
        csv="fig1/genes_suppl.csv",
        pdf="fig1/genes_suppl.pdf",
        svg="fig1/genes_suppl.svg"
    resources:
        mem=8000
    log:
        "fig1/genes_suppl.log"
    script:
        "scripts/fig1_genes_suppl.R"
