# vim: syntax=python


# WARNING!! MRCA estimates only apply to oligo-oligo pairs! Only pta_oligo aging rates
# for total mutation burden and SBS1 are used!
# When applied to neuron-neuron or neuron-oligo pairs, the only useful information
# is the number of shared and private mutations.  All model-based extrapolations of
# years-to-MRCA are incorrect.
rule fit_mrca_pair:
    input:
        object1="scan2/full_objects/{sample1}.rda",
        object2="scan2/full_objects/{sample2}.rda",
        metadata="metadata/sample_metadata.csv",
        cosmic="mutsigs/{mutsig_selection_method}/cosmic_reduced___A.csv",
        sigb="external_data/Lodato2018_SignatureData_Aging.csv",
        aging_model="aging_rates/all___mutburden_models___A.csv",
        # The SBS1 aging rate is taken from this model. We always use the SBS1 rate estimated
        # by the PTA model even when comparing MDA cells.
        aging_model_sigs="mutsigs/{mutsig_selection_method}/cosmic_aging/pta___cosmic_models_vs_age___A.csv"
    output:
        muts="shared_mutations/{mutsig_selection_method}/{sample1}___vs___{sample2}___mutations.csv",
        fits="shared_mutations/{mutsig_selection_method}/{sample1}___vs___{sample2}___mrca.csv"
    log:
        "shared_mutations/{mutsig_selection_method}/{sample1}___vs___{sample2}.log"
    benchmark:
        "shared_mutations/{mutsig_selection_method}/{sample1}___vs___{sample2}.benchmark.txt"
    resources:
        # The full SCAN2 objects are around ~9GB each now with the spatial sensitivity models.
        # In addition, loading in a ~9GB object causes a peak memory usage of ~12.5GB.
        mem_mb=25000
    script:
        "scripts/fit_mrca.R"


# write out a table of all shared mutation counts, after subtracting filtered sites
# (which isn't used in MRCA time estimates because the aging trend lines were estimated
# without removing filtered sites).
rule number_shared_snvs:
    input:
        unfilt="tables/all___UNFILTERED_mut___any.csv",  # Filter status for all mutations
        muts=lambda wildcards: [ 'shared_mutations/' + wildcards.mutsig_selection_method + '/' + tup[0] + "___vs___" + tup[1] + "___mutations.csv" for tup in itertools.combinations(config['bams'][wildcards.donor]['single_cell'].keys(), r=2) ]
    output:
        pdf="shared_mutations/{mutsig_selection_method}/{donor}.pdf",
        csv="shared_mutations/{mutsig_selection_method}/{donor}.csv"
    params:
        donor_id="{donor}"
    log:
        "shared_mutations/{mutsig_selection_method}/{donor}.log"
    resources:
        mem_mb=4000
    script:
        "scripts/number_shared_snvs.R"
