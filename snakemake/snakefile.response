# vim: syntax=python

rule respfig1_genes:
    input:
        # Any single cell sensitivity file can be used. The only information taken from
        # this file is `size.mb`, which records the size of the enrichment region and is
        # the same for all samples.
        sens="enrichment/sensitivity/bed_regions/UMB4976_E1_sensitivity.txt",
        enrich="enrichment/gtex_genes/bed_regions/{group}___AB.csv"
    output:
        main_pdf="respfig1/{group}_genes.pdf",
        inset_pdf="respfig1/{group}_genes_inset.pdf",
        all_csv='respfig1/{group}_table.csv',
        minpoints_csv='respfig1/{group}_per_gene_minimums.csv'
    log:
        "respfig1/{group}_genes.log"
    resources:
        mem_mb=8000   # more mem since doing all possible gene sets, not just top 5000
    script:
        "scripts/respfig1_genes.R"


rule respfig2_quantile_comparisons:
    input:
        one="fig4_corrected/panels_cdefg_enrichment_analyses_pta_neuron_half1_vs_pta_oligo_half1.corrected.pdf",
        two="fig4_corrected/panels_cdefg_enrichment_analyses_pta_neuron_half2_vs_pta_oligo_half2.corrected.pdf",
        three="fig4_corrected/panels_cdefg_enrichment_analyses_pta_neuron_vs_pta_oligo_batch1.corrected.pdf",
        four="fig4_corrected/panels_cdefg_enrichment_analyses_pta_neuron_vs_pta_oligo.corrected.pdf",
        four2="fig4_corrected/panels_cdefg_enrichment_analyses_pta_neuron_vs_mda_sox10_elderly.corrected.pdf",
        four3="fig4_corrected/panels_cdefg_enrichment_analyses_pta_neuron_vs_mda_gfap_elderly.corrected.pdf",
        five="fig4_corrected/panel_h_chromhmm_all_comparisons___snv.corrected.pdf",
        six="fig4_corrected/panel_i_nott_enhprom_all_comparisons___snv.corrected.pdf"
    output:
        one="respfig2/pta_neuron_half1_vs_pta_oligo_half1.corrected.pdf",
        two="respfig2/pta_neuron_half2_vs_pta_oligo_half2.corrected.pdf",
        three="respfig2/pta_neuron_vs_pta_oligo_batch1.corrected.pdf",
        four="respfig2/pta_neuron_vs_pta_oligo.corrected.pdf",
        four2="respfig2/pta_neuron_vs_mda_sox10_elderly.corrected.pdf",
        four3="respfig2/pta_neuron_vs_mda_gfap_elderly.corrected.pdf",
        five="respfig2/panel_h_chromhmm_all_comparisons___snv.corrected.pdf",
        six="respfig2/panel_i_nott_enhprom_all_comparisons___snv.corrected.pdf"
    localrule: True
    resources:
        mem_mb=100,
        localjob=1
    shell:
        """
        cp -n {input.one} {output.one}
        cp -n {input.two} {output.two}
        cp -n {input.three} {output.three}
        cp -n {input.four} {output.four}
        cp -n {input.four2} {output.four2}
        cp -n {input.four3} {output.four3}
        cp -n {input.five} {output.five}
        cp -n {input.six} {output.six}
        """


rule respfig_half_analysis_chromhmm_states:
    input:
        enrich_tables=expand("fig4_corrected/panel_h_chromhmm_{group}___snv.corrected.csv",
            group=[ 'pta_neuron', 'pta_neuron_half1', 'pta_neuron_half2', 'pta_oligo_batch1', 'pta_oligo_half1', 'pta_oligo_half2' ])
    output:
        svg="respfig2/panel_h_chromhmm___snv.corrected.svg",
        pdf="respfig2/panel_h_chromhmm___snv.corrected.pdf"
    log:
        "respfig2/panel_h_chromhmm___snv.corrected.log"
    params:
        colors=','.join([ config['group_colors'][g] for g in [ 'pta_neuron', 'pta_neuron_half1', 'pta_neuron_half2', 'pta_oligo_batch1', 'pta_oligo_half1', 'pta_oligo_half2' ] ])
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    script:
        "scripts/barplot_enrich_new2.R"



rule respfig_half_analysis_nott_enhancers_and_promoters:
    input:
        enrich_tables=expand("fig4_corrected/panel_i_nott_enhprom_{group}___snv.corrected.csv",
            group=[ 'pta_neuron', 'pta_neuron_half1', 'pta_neuron_half2', 'pta_oligo_batch1', 'pta_oligo_half1', 'pta_oligo_half2' ])
    output:
        svg="respfig2/panel_i_nott_enhprom___snv.corrected.svg",
        pdf="respfig2/panel_i_nott_enhprom___snv.corrected.pdf"
    log:
        "respfig2/panel_i_nott_enhprom___snv.corrected.log"
    params:
        colors=','.join([ config['group_colors'][g] for g in [ 'pta_neuron', 'pta_neuron_half1', 'pta_neuron_half2', 'pta_oligo_batch1', 'pta_oligo_half1', 'pta_oligo_half2' ] ])
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    script:
        "scripts/barplot_enrich_new2.R"


import itertools

rule respfig3_number_shared_snvs:
    input:
        pdf="shared_mutations/sigprofilerextractor/{donor}.pdf",
        csv="shared_mutations/sigprofilerextractor/{donor}.csv"
    output:
        pdf="respfig3/{donor}.pdf",
        csv="respfig3/{donor}.csv"
    localrule: True
    resources:
        mem_mb=100,
        localjob=1
    shell:
        """
        cp -n {input.pdf} {output.pdf}
        cp -n {input.csv} {output.csv}
        """


rule respfig4_mean_depth_vs_covariates:
    input:
        metrics="suppfigX/metrics.csv",
        meta="metadata/sample_metadata.csv"
    output:
        pdf="respfig4/all_panels.pdf",
        csv="respfig4/data.csv"
    log:
        "respfig4/log.txt"
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    script:
        "scripts/respfig4_mean_depth_vs_covariates.R"



# Rehash of all Fig5 plots but using VAF-based mutations only (passA).
rule respfig6_consolidate_enrichment_analyses:
    input:
        snv_indel_pairs=lambda wildcards:
            expand('enrichment/{datasource}/quantile/{{group}}___{qualtype}.10quantiles.corrected.csv',
                datasource=[ 'scrnaseq_expression_mc02', 'scatacseq', 'repliseq', 'roadmap_histone_signal_brain' ],
                qualtype=[ 'A', 'indel_A' ])
    output:
        csv="respfig6/{group}_consolidated_signals_10quantiles.corrected.csv"
    log:
        "respfig6/{group}_consolidated_signals_10quantiles.corrected.log"
    benchmark:
        "respfig6/{group}_consolidated_signals_10quantiles.corrected.benchmark.txt"
    params:
        tag="{group}"
    localrule: True
    resources:
        mem_mb=4000,
        localjob=1
    script:
        "scripts/consolidate_enrichment_tables.R"


rule respfig6_many_enrichment_analyses:
    input:
        group1='respfig6/{any_group1}_consolidated_signals_10quantiles.corrected.csv',
        group2='respfig6/{any_group2}_consolidated_signals_10quantiles.corrected.csv'
    output:
        pdf="respfig6/panels_cdefg_enrichment_analyses_{any_group1}_vs_{any_group2}.corrected.pdf",
        svg="respfig6/panels_cdefg_enrichment_analyses_{any_group1}_vs_{any_group2}.corrected.svg",
        csv="respfig6/panels_cdefg_enrichment_analyses_{any_group1}_vs_{any_group2}.corrected.csv"
    log:
        "respfig6/panels_cdefg_enrichment_analyses_{any_group1}_vs_{any_group2}.corrected.log"
    params:
        #group1_color=lambda wildcards: config['group_colors'][wildcards.any_group1],
        #group2_color=lambda wildcards: config['group_colors'][wildcards.any_group2]
        # col_map instead colors lines by data type and differentiates groups by solid and dashed lines
        group1_color="col_map",
        group2_color="col_map",
        log_y_axis="true"
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    script:
        "scripts/fig4_panels_cdefg.R"


rule respfig6_quantile_scatter_plots:
    input:
        a="respfig6/panels_cdefg_enrichment_analyses_pta_neuron_vs_pta_oligo.corrected.csv",
        ab="fig4_corrected/panels_cdefg_enrichment_analyses_pta_neuron_vs_pta_oligo.corrected.csv"
    output:
        pdf="respfig6/quantile_scatter_plots.pdf"
    log:
        "respfig6/quantile_scatter_plots.log"
    localrule: True
    resources:
        mem_mb=250,
        localjob=1
    script:
        "scripts/respfig6_quantile_scatterplots.R"


rule respfig6_consolidate_chromhmm:
    input:
        enrich_objects=lambda wildcards: "enrichment/roadmap_chromhmm_brain/bed_regions/{group}___A/bedenrich/SUMMARY.corrected.rda"
    output:
        csv="respfig6/panel_h_chromhmm_{group}___snv.corrected.csv"
    log:
        "respfig6/panel_h_chromhmm_{group}___snv.corrected.log"
    params:
        group_tag='{group}',
        signal='eid=E073',
        # 3_TssFlnk, 10_,11_,12_ (bivalent states) are all tiny genomic regions, creating
        # huge error bars that make the rest of the plot difficult to read.
        features="1_TssA,2_TssAFlnk,4_Tx,5_TxWk,6_EnhG,7_Enh,9_Het,13_ReprPC,14_ReprPCWk,15_Quies"
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    script:
        "scripts/consolidate_bed_enrichment_tables.R"


rule respfig6_plot_chromhmm_states:
    input:
        enrich_tables=expand("respfig6/panel_h_chromhmm_{group}___snv.corrected.csv",
            group=[ 'pta_neuron', 'pta_oligo' ])
    output:
        svg="respfig6/panel_h_chromhmm___snv.corrected.svg",
        pdf="respfig6/panel_h_chromhmm___snv.corrected.pdf"
    log:
        "respfig6/panel_h_chromhmm___snv.corrected.log"
    params:
        colors=','.join([ config['group_colors'][g] for g in [ 'pta_neuron', 'pta_oligo' ] ])
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    script:
        "scripts/barplot_enrich_new2.R"


rule respfig6_consolidate_nott_enhancers_and_promoters:
    input:
        enrich_objects=lambda wildcards: "enrichment/nott/bed_regions/{group}___A/bedenrich/SUMMARY.corrected.rda"
    output:
        csv="respfig6/panel_i_nott_enhprom_{group}___snv.corrected.csv"
    log:
        "respfig6/panel_i_nott_enhprom_{group}___snv.corrected.log"
    params:
        group_tag='{group}',
        signal='datasource=nott_enhprom',
        features="astrocyte_enhancer,neuron_enhancer,oligo_enhancer,microglia_enhancer,astrocyte_promoter,neuron_promoter,oligo_promoter,microglia_promoter"
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    script:
        "scripts/consolidate_bed_enrichment_tables.R"


rule respfig6_plot_nott_enhancers_and_promoters:
    input:
        enrich_tables=expand("respfig6/panel_i_nott_enhprom_{group}___snv.corrected.csv",
            group=[ 'pta_neuron', 'pta_oligo' ])
    output:
        svg="respfig6/panel_i_nott_enhprom___snv.corrected.svg",
        pdf="respfig6/panel_i_nott_enhprom___snv.corrected.pdf",
    log:
        "respfig6/panel_i_nott_enhprom___snv.corrected.log"
    params:
        colors=','.join([ config['group_colors'][g] for g in [ 'pta_neuron', 'pta_oligo' ] ])
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    script:
        "scripts/barplot_enrich_new2.R"
