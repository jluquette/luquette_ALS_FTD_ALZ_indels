# vim: syntax=python

import pandas as pd

meta = pd.read_csv('metadata/sample_metadata.csv')
donors_by_samples = {
    'pta' : list(meta[meta["amp"]=="PTA"]['donor'] + '___' + meta[meta["amp"]=="PTA"]['sample']),
    'mda' : list(meta[meta["amp"]=="MDA"]['donor'] + '___' + meta[meta["amp"]=="MDA"]['sample']),
    'all' : list(meta[meta["amp"]!="bulk"]['donor'] + '___' + meta[meta["amp"]!="bulk"]['sample'])
}

# For NMF, only VAF-based calls (A, indel_A) may be used
# Our input VCFs usually contain all mutation types, but the only way to be safe
# is to run SPMG for each of SBS and ID separately.
rule copy_vcf:
    input:
        vcf=lambda wildcards: "vcfs/" + ('A' if wildcards.nmf_spectype == 'SBS' else 'indel_A') + "/{donor}___{sample}.vcf"
    output:
        vcf='nmf/{nmf_runtype}/matrix_generator/{nmf_spectype}/{donor}___{sample}.vcf'
    resources:
        mem=1000
    localrule: True
    shell:
        """
        cp -n {input.vcf} {output.vcf}
        """


rule generate_matrix_snv:
    input:
        vcfs=lambda wildcards: expand('nmf/{{nmf_runtype}}/matrix_generator/SBS/{donorsample}.vcf',
            donorsample=donors_by_samples[wildcards.nmf_runtype])
    output:
        # the name "matrix" must match the first argument of matGen.SigProfilerMatrixGeneratorFunc()
        out="nmf/{nmf_runtype}/matrix_generator/SBS/output/SBS/matrix.SBS96.all"
    params:
        working_dir='nmf/{nmf_runtype}/matrix_generator/SBS/'
    localrule: True
    resources:
        mem=3000
    run:
        # SigProfilerMatrixGenerator creates output/SBS/matrix* files in its working directory
        from SigProfilerMatrixGenerator.scripts import SigProfilerMatrixGeneratorFunc as matGen
        matGen.SigProfilerMatrixGeneratorFunc('matrix', 'GRCh37', params.working_dir)


rule convert_matrix_snv:
    input:
        mat="nmf/{nmf_runtype}/matrix_generator/SBS/output/SBS/matrix.SBS96.all"
    output:
        converted_mat='nmf/{nmf_runtype}/matrix_generator/SBS/converted_matrix.txt'
    log:
        'nmf/{nmf_runtype}/matrix_generator/SBS/converted_matrix.log'
    resources:
        mem=3000
    script:
        "scripts/nmf_make_input_sbs96.R"


rule generate_matrix_indel:
    input:
        vcfs=lambda wildcards: expand('nmf/{{nmf_runtype}}/matrix_generator/ID/{donorsample}.vcf',
            donorsample=donors_by_samples[wildcards.nmf_runtype])
    output:
        # the name "matrix" must match the first argument of matGen.SigProfilerMatrixGeneratorFunc()
        out="nmf/{nmf_runtype}/matrix_generator/ID/output/ID/matrix.ID83.all"
    params:
        working_dir='nmf/{nmf_runtype}/matrix_generator/ID/'
    localrule: True
    resources:
        mem=3000
    run:
        # SigProfilerMatrixGenerator creates output/SBS/matrix* files in its working directory
        from SigProfilerMatrixGenerator.scripts import SigProfilerMatrixGeneratorFunc as matGen
        matGen.SigProfilerMatrixGeneratorFunc('matrix', 'GRCh37', params.working_dir)


rule convert_matrix_indel:
    input:
        mat="nmf/{nmf_runtype}/matrix_generator/ID/output/ID/matrix.ID83.all"
    output:
        converted_mat='nmf/{nmf_runtype}/matrix_generator/ID/converted_matrix.txt'
    log:
        'nmf/{nmf_runtype}/matrix_generator/ID/converted_matrix.log'
    resources:
        mem=3000
    script:
        "scripts/nmf_make_input_id83.R"


rule nmf_scatter_setup:
    input:
        txt='nmf/{nmf_runtype}/matrix_generator/{nmf_spectype}/converted_matrix.txt',
        sigprofiler_source='external_data/SigProfiler_2_5_1_7/source',
        runone_source='external_data/SigProfiler_2_5_1_7/run_one.m'
    output:
        csv="nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/input.csv",
        runone="nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/run_one.m",
        input_dir=directory("nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/input"),
        source_dir=directory("nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/source")
    params:
        out_dir="nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/"
    resources:
        mem_mb=100
    localrule: True
    shell:
        """
        cp {input.txt} {output.csv}
        mkdir -p {output.input_dir}
        cp -r {input.sigprofiler_source} {params.out_dir}
        cp {input.runone_source} {params.out_dir}
        """


rule nmf_scatter:
    input:
        csv='nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/input.csv',
        runone='nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/run_one.m'
    output:
        'nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/full/res__full_signatures_{n}.mat',
        'nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/skinny/res__skinny_signatures_{n}.mat',
        'nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/summary/res__summary.mat',
        'nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/text/res__signature_activities_for_{n}_sigs.csv',
        'nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/text/res__signature_patterns_for_{n}_sigs.csv'
    log:
        'nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/log.txt'
    params:
        n='{n}',
        ctx=lambda wildcards: '96' if wildcards.nmf_spectype == 'SBS' else 'indels',
        iters=1000,
        working_dir='nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}'
    benchmark:
        'nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/benchmark.tsv'
    resources:
        mem_mb=6000
    shell:
        """
        cd {params.working_dir}
        matlab -nodisplay -nosplash -nodesktop -batch \
            "run_one({params.n}, '{params.ctx}', {params.iters}, './', './', './source')"
        """


rule plot_nmf_sigs_and_exposures:
    input:
        mat='nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/nsigs{n}/skinny/res__skinny_signatures_{n}.mat'
    output:
        pdf='nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/signatures_{n}.pdf',
        expo_csv='nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/exposures_{n}.csv',
        proc_csv='nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/processes_{n}.csv'
    params:
        muttype="{nmf_spectype}"
    log:
        'nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/signatures_{n}.log'
    localrule: True
    resources:
        mem=1000
    script:
        "scripts/nmf_plot_sigs_and_exposures.R"


rule plot_selection_criteria:
    input:
        summaries=expand('nmf/{{nmf_runtype}}/sigprofiler/{{nmf_spectype}}/nsigs{n}/summary/res__summary.mat',
                n=nmf_sig_ns),
        skinny=expand('nmf/{{nmf_runtype}}/sigprofiler/{{nmf_spectype}}/nsigs{n}/skinny/res__skinny_signatures_{n}.mat',
                n=nmf_sig_ns)
    output:
        pdf='nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/selection_criteria.pdf',
        csv='nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/selection_criteria.csv'
    log:
        'nmf/{nmf_runtype}/sigprofiler/{nmf_spectype}/selection_criteria.log'
    localrule: True
    resources:
        mem=1000
    script:
        "scripts/nmf_plot_selection_criteria.R"
