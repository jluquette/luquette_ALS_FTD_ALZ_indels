# vim: syntax=python

########################################################################
# HiC TADs (A and B-compartments)
########################################################################
enrichment_hic_tads_config = dict(
    **{ 'output_dir': 'enrichment/hic_tads',
        'SIGNAL_MANIFEST': 'manifests/HIC_TADS.MANIFEST' },
    **enrichment_config
)

module enrichment_hic_tads:
    snakefile: "snakefile.bed_enrichment"
    config: enrichment_hic_tads_config

use rule * from enrichment_hic_tads as enrichment_hic_tads_*

# contains ~30 tracks at ~250k resolution
# needed ~30GB for neuron___A, so guessing maybe double for oligo_mdapta
# needed ~56B for oligo_mda_2elderly
# I have no idea why these memory usages are so high. indel analysis only
# requires ~2GB, so the size of the BED file is unlikely to be the culprit.
# for now, just brute force it
use rule enrichment_bed_analysis from enrichment_hic_tads as enrichment_hic_tads_enrichment_bed_analysis with:
    resources:
        mem_mb=128000

########################################################################
# Roadmap epigenomics chromHMM  state models
########################################################################
enrichment_roadmap_chromhmm_config = dict(
    **{ 'output_dir': 'enrichment/roadmap_chromhmm_brain',
        'SIGNAL_MANIFEST': 'manifests/ROADMAP_CHROMHMM_BRAIN.MANIFEST' },
    **enrichment_config
)

module enrichment_roadmap_chromhmm:
    snakefile: "snakefile.bed_enrichment"
    config: enrichment_roadmap_chromhmm_config

use rule * from enrichment_roadmap_chromhmm as enrichment_roadmap_chromhmm_*

# Uses 200 bp tiles and has >200 tracks, so give it a generous amount of RAM
# N.B. failed with 32G after 1 hour of loading BED files
# Max usage was ~37G.
# -- The above is no longer applicable when using only the 13 brain samples.
# -- but leaving in here anyway in case we go back to the full catalog.
use rule enrichment_bed_analysis from enrichment_roadmap_chromhmm as enrichment_roadmap_chromhmm_enrichment_bed_analysis with:
    resources:
        mem_mb=42000

use rule enrichment_bed_plot from enrichment_roadmap_chromhmm as enrichment_roadmap_chromhmm_enrichment_bed_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        xlab='eid',
        xgroup='quantile',
        ygroup='model',
        highlight='eid=E073'


########################################################################
# Roadmap epigenomics histones
########################################################################
enrichment_roadmap_histone_signal_config = dict(
    **{ 'output_dir': 'enrichment/roadmap_histone_signal_brain',
        'SIGNAL_MANIFEST': 'manifests/ROADMAP_HISTONE_BIGWIG_BRAIN.MANIFEST' },
    **enrichment_config
)

module enrichment_roadmap_histone_signal:
    snakefile: "snakefile.enrichment"
    config: enrichment_roadmap_histone_signal_config

use rule * from enrichment_roadmap_histone_signal as enrichment_roadmap_histone_signal_*

use rule sigenrichment_qbed_analysis from enrichment_roadmap_histone_signal as enrichment_roadmap_histone_signal_sigenrichment_qbed_analysis with:
    resources:
        mem_mb=lambda wildcards: 96000 if wildcards.binsize == '1000' or wildcards.nquantiles == '50' else 30000

use rule enrichment_plot from enrichment_roadmap_histone_signal as enrichment_roadmap_histone_signal_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='mark'
    output:
        expand('enrichment/roadmap_histone_signal_brain/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/roadmap_histone_signal_brain/quantile/{mutclass}.{nquantiles}quantiles.log'


use rule sigenrichment_plot from enrichment_roadmap_histone_signal as enrichment_roadmap_histone_signal_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='mark'
    output:
        expand('enrichment/roadmap_histone_signal_brain/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/roadmap_histone_signal_brain/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'


########################################################################
# ENCODE replication timing measured by Repli-chip
########################################################################
enrichment_encode_replichip_config = dict(
    **{ 'output_dir': 'enrichment/encode_replichip',
        'SIGNAL_MANIFEST': 'manifests/ENCODE_REPLICHIP.MANIFEST' },
    **enrichment_config
)

module enrichment_encode_replichip:
    snakefile: "snakefile.enrichment"
    config: enrichment_encode_replichip_config

use rule * from enrichment_encode_replichip as enrichment_encode_replichip_*

use rule sigenrichment_qbed_analysis from enrichment_encode_replichip as enrichment_encode_replichip_sigenrichment_qbed_analysis with:
    resources:
        mem_mb=lambda wildcards: 70000 if wildcards.binsize == '1000' or wildcards.nquantiles == '50' else 30000

use rule enrichment_plot from enrichment_encode_replichip as enrichment_encode_replichip_enrichment_plot with:
    params:
        ignore='BINSIZE=1000',
        group='datasource'
    output:
        expand('enrichment/encode_replichip/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/encode_replichip/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_encode_replichip as enrichment_encode_replichip_sigenrichment_plot with:
    params:
        ignore='BINSIZE=1000',
        group='datasource'
    output:
        expand('enrichment/encode_replichip/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/encode_replichip/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'


########################################################################
# Replication timing measured by Repliseq
########################################################################
enrichment_repliseq_config = dict(
    **{ 'output_dir': 'enrichment/repliseq',
        'SIGNAL_MANIFEST': 'manifests/REPLISEQ.MANIFEST' },
    **enrichment_config
)

module enrichment_repliseq:
    snakefile: "snakefile.enrichment"
    config: enrichment_repliseq_config

use rule * from enrichment_repliseq as enrichment_repliseq_*

use rule sigenrichment_qbed_analysis from enrichment_repliseq as enrichment_repliseq_sigenrichment_qbed_analysis with:
    resources:
        mem_mb=lambda wildcards: 70000 if wildcards.binsize == '1000' or wildcards.nquantiles == '50' else 30000

use rule enrichment_plot from enrichment_repliseq as enrichment_repliseq_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='datasource'
    output:
        expand('enrichment/repliseq/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/repliseq/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_repliseq as enrichment_repliseq_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='datasource'
    output:
        expand('enrichment/repliseq/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/repliseq/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'


########################################################################
# Conservation tracks from UCSC
########################################################################
enrichment_conservation_config = dict(
    **{ 'output_dir': 'enrichment/conservation',
        'SIGNAL_MANIFEST': 'manifests/CONSERVATION.MANIFEST' },
    **enrichment_config
)

module enrichment_conservation:
    snakefile: "snakefile.enrichment"
    config: enrichment_conservation_config

use rule * from enrichment_conservation as enrichment_conservation_*

# Conservation tracks have bp resolution over the entire genome. This
# causes bigWigAverageOverBed to consume unbelievably large amounts of
# memory for large windows like 1MB.
use rule make_qbed_from_bigwig from enrichment_conservation as enrichment_conservation_make_qbed_from_bigwig with:
    resources:
        mem_mb=65000

use rule enrichment_plot from enrichment_conservation as enrichment_conservation_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='track'
    output:
        expand('enrichment/conservation/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/conservation/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_conservation as enrichment_conservation_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='track'
    output:
        expand('enrichment/conservation/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/conservation/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'


########################################################################
# Our scATAC-seq data
########################################################################
enrichment_scatacseq_config = dict(
    **{ 'output_dir': 'enrichment/scatacseq',
        'SIGNAL_MANIFEST': 'manifests/SCATACSEQ.MANIFEST' },
    **enrichment_config
)

module enrichment_scatacseq:
    snakefile: "snakefile.enrichment"
    config: enrichment_scatacseq_config

use rule * from enrichment_scatacseq  as enrichment_scatacseq_*

use rule make_qbed_from_bigwig from enrichment_scatacseq as enrichment_scatacseq_make_qbed_from_bigwig with:
    resources:
        mem_mb=15000

use rule enrichment_plot from enrichment_scatacseq as enrichment_scatacseq_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='celltype',
    output:
        expand('enrichment/scatacseq/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scatacseq/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_scatacseq as enrichment_scatacseq_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='celltype',
    output:
        expand('enrichment/scatacseq/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scatacseq/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'


########################################################################
# Our scATAC-seq data but using foldchange signals
#
# This differs from typical qbed analysis because there is no base
# bigwig signal files from which the qbeds are constructed. Instead,
# qbeds are created from the non-foldchange scATAC-seq qbeds.
########################################################################
enrichment_scatacseq_foldchange_config = dict(
    **{ 'output_dir': 'enrichment/scatacseq_foldchange',
        # This manifest is a dummy containing only metadata, not files
        'SIGNAL_MANIFEST': 'manifests/SCATACSEQ_FOLDCHANGE.MANIFEST' },
    **enrichment_config
)

module enrichment_scatacseq_foldchange:
    snakefile: "snakefile.enrichment"
    config: enrichment_scatacseq_foldchange_config

# Only qbed analysis is relevant
use rule enrichment_qbed_analysis from enrichment_scatacseq_foldchange as enrichment_scatacseq_foldchange_enrichment_qbed_analysis

use rule enrichment_table from enrichment_scatacseq_foldchange as enrichment_scatacseq_foldchange_enrichment_table

use rule enrichment_plot from enrichment_scatacseq_foldchange as enrichment_scatacseq_foldchange_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='celltype',
    output:
        expand('enrichment/scatacseq_foldchange/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scatacseq_foldchange/quantile/{mutclass}.{nquantiles}quantiles.log'


########################################################################
# Cancer SNV density
########################################################################
enrichment_cancer_config = dict(
    **{ 'output_dir': 'enrichment/cancer_snvdens',
        'SIGNAL_MANIFEST': 'manifests/CANCER_SNVDENS.MANIFEST' },
    **enrichment_config
)

module enrichment_cancer:
    snakefile: "snakefile.enrichment"
    config: enrichment_cancer_config

use rule * from enrichment_cancer as enrichment_cancer_*

use rule enrichment_plot from enrichment_cancer as enrichment_cancer_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='signal_type'
    output:
        expand('enrichment/cancer_snvdens/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/cancer_snvdens/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_cancer as enrichment_cancer_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='signal_type'
    output:
        expand('enrichment/cancer_snvdens/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/cancer_snvdens/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'
