# vim: syntax=python

# Convenience: for some analyses that use bedtools, extract only the
# intervals that should be removed.
rule tile_to_mask:
    input:
        "alignability/genome_tiles/genome_tiles_{binsize}binsize.bed"
    output:
        "alignability/genome_tiles/genome_mask_{binsize}binsize.bed"
    resources:
        mem_mb=1000
    shell:
        """
        grep '0$' {input} > {output}
        """


# The ultimate output of the alignability analysis: a set of tiles covering
# the genome with poorly aligned regions removed.
rule tile_genome:
    input:
        rdas=expand("alignability/base_tile_size_tables/chr{chr}.rda",
            chr=config['chrs_for_alignability']),
        metadata="metadata/sample_metadata.csv"
    output:
        bed="alignability/genome_tiles/genome_tiles_{binsize}binsize.bed"
    log:
        "alignability/genome_tiles/genome_tiles_{binsize}binsize.log"
    params:
        binsize="{binsize}"
    resources:
        mem_mb=40000
    script:
        "scripts/tile_genome_no_badbins.R"


# the 200bp version is so slow that it makes sense to scatter/gather
rule tile_genome_200bp_scatter:
    input:
        rdas="alignability/base_tile_size_tables/chr{chr}.rda",
        metadata="metadata/sample_metadata.csv"
    output:
        bed="alignability/genome_tiles/genome_tiles_200binsize.chr{chr}.bed"
    log:
        "alignability/genome_tiles/genome_tiles_200binsize.chr{chr}.log"
    params:
        binsize="200"
    resources:
        mem_mb=12000
    script:
        "scripts/tile_genome_no_badbins.R"


# Override the non-scatter/gather method
ruleorder: tile_genome_200bp_gather > tile_genome
rule tile_genome_200bp_gather:
    input:
        expand("alignability/genome_tiles/genome_tiles_200binsize.chr{chr}.bed",
            chr=config['chrs_for_alignability'])
    output:
        "alignability/genome_tiles/genome_tiles_200binsize.bed"
    resources:
        mem_mb=4000
    shell:
        """
        cat {input} > {output}
        """


rule digest_chrom:
    input:
        matfiles=config['scan2_depth_matrices'].values(),
        matfileidxs=[ matfile + ".tbi" for matfile in config['scan2_depth_matrices'].values() ]
    output:
        rda="alignability/base_tile_size_tables/chr{chr}.rda"
    benchmark:
        "alignability/base_tile_size_tables/benchmark_chr{chr}.txt"
    log:
        "alignability/base_tile_size_tables/chr{chr}.log"
    resources:
        mem_mb=lambda wildcards, input, threads: 3000*threads
    params:
        chrom="{chr}",
        base_tile_size=100,   # in basepairs
        # depth matrices are processed in chunks to limit memory usage
        tiles_per_chunk=10000 # = 1MB chunks
    threads: 20
    script:
        "scripts/digest_chrom_depth.R"


rule bulk_accessible:
    input:
        rda="alignability/base_tile_size_tables/chr{chrom}.rda",
        metadata="metadata/sample_metadata.csv"
    output:
        txt="alignability/bulk_accessible/chr{chrom}.txt"
    log:
        "alignability/bulk_accessible/chr{chrom}.log"
    params:
        min_reads_per_bulk=5
    threads: 1
    resources:
        mem_mb=5000
    script:
        "scripts/get_bulk_alignable_bps.R"


rule gather_bulk_accessible:
    input:
        txts=expand("alignability/bulk_accessible/chr{chrom}.txt",
            chrom=config['chrs_for_alignability'])
    output:
        txt="alignability/bulk_accessible/all_chrs.txt"
    log:
        "alignability/bulk_accessible/all_chrs.log"
    threads: 1
    localrule: True
    resources:
        mem_mb=1000,
        localjob=1
    script:
        "scripts/combine_uniform_tables.R"


'''
# this script expects an input file format that is no longer generated
# XXX: some of the variables (like 'gs') are created in plot_bin_classes.R
rule plot_digest:
    input:
        "alignability/base_tile_size_tables/chr{chr}.rda"  # this is not correct
    output:
        "alignability/data_plots/chr{chr}.{resolution}.svg",
        "alignability/data_plots/chr{chr}.{resolution}.pdf"
    resources:
        mem_mb=8000
    params:
        "{resolution}"
    script:
        "scripts/plot_chrom_depth.R"


rule plot_bin_classes:
    input:
        expand("alignability/base_tile_size_tables/chr{chr}.rda", chr=chrs)
    output:
        expand("alignability/plots/chromosome_bin_classes_heatmap.{output}",
            output=['svg', 'pdf', 'jpeg']),
        expand("alignability/plots/chromosome_bin_classes_barplot.{output}",
            output=['svg', 'pdf'])
    resources:
        mem_mb=40000
    log:
        "alignability/plots/chromosome_bin_classes.log"
    script:
        "scripts/plot_bin_classes.R"
'''
