# vim: syntax=python
#



# Sample-specific metadata
# XXX: FIXME: these metadata files are actually produced by this snakefile.
path_to_metadata = "/n/data1/hms/dbmi/park/jluquette/glia/figures/test2/input"

neuron_manifest = pd.read_csv(path_to_metadata + "/neuron___meta___A.csv")
neuron_donors = [ str(x) for x in neuron_manifest['donor'].to_list() ]
neuron_samples = neuron_manifest['sample'].to_list()
neuron_paths = [ '/n/data1/hms/dbmi/park/jluquette/pta/' + neuron_donors[i] + '/scansnv_fdr01_noX/callable_regions/' + neuron_samples[i] for i in range(0, len(neuron_samples)) ]
neuron_dict = dict(zip(neuron_samples, neuron_paths))


oligo_manifest = pd.read_csv(path_to_metadata + "/oligo___meta___A.csv")
oligo_donors = [ str(x) for x in oligo_manifest['donor'].to_list() ]
oligo_samples = oligo_manifest['sample'].to_list()
oligo_paths = [ '/n/data1/hms/dbmi/park/jluquette/glia/' + oligo_donors[i] + '/scansnv/callable_regions/' + oligo_samples[i] for i in range(0, len(oligo_samples)) ]
oligo_dict = dict(zip(oligo_samples, oligo_paths))


pathdict = { **neuron_dict, **oligo_dict }



# Convenience: for some analyses that use bedtools, extract only the
# intervals that should be removed.
rule tile_to_mask:
    input:
        "alignability/genome_tiles/genome_tiles_{binsize}binsize.bed"
    output:
        "alignability/genome_tiles/genome_mask_{binsize}binsize.bed"
    resources:
        mem=1000
    shell:
        """
        grep '0$' {input} > {output}
        """


# The ultimate output of the alignability analysis: a set of tiles covering
# the genome with poorly aligned regions removed.
rule tile_genome:
    input:
        expand("alignability/data_digest/chr{chr}.rda",
            chr=chrs)
    output:
        "alignability/genome_tiles/genome_tiles_{binsize}binsize.bed"
    log:
        "alignability/genome_tiles/genome_tiles_{binsize}binsize.log"
    params:
        binsize="{binsize}"
    resources:
        mem=40000
    script:
        "scripts/tile_genome_no_badbins.R"


# this can be applied to any file, they're all identical in positions
rule cut_position_column:
    input:
        lambda wildcards: topath('UMB4976_E1', wildcards.chr, 'chr')
    output:
        "alignability/data_columns/chr{chr}/positions.txt"
    resources:
        mem=1000
    shell:
        "cut -f1 {input} | cut -f2 -d: > {output}"


# Really horrible hack because the files are not consistently named.
# Some have a 'chr' prefix in front of chrom number and some don't.
def topath(sample, chrom, chrprefix):
    return(pathdict[sample] + "/callable_regions." + chrprefix + chrom + ".txt")

rule cut_data_column:
    input:
        lambda wildcards: topath(wildcards.sample, wildcards.chr, '') if Path(topath(wildcards.sample, wildcards.chr, '')).is_file() else topath(wildcards.sample, wildcards.chr, 'chr')
    output:
        "alignability/data_columns/chr{chr}/{sample}.txt"
    resources:
        mem=1000
    shell:
        "cut -f2 {input} > {output}"


rule digest_chrom:
    input:
        "alignability/data_columns/chr{chr}/positions.txt",
        expand("alignability/data_columns/chr{{chr}}/{sample}.txt",
            sample=pathdict.keys())
    output:
        "alignability/data_digest/chr{chr}.rda"
    log:
        "alignability/data_digest/chr{chr}.log"
    resources:
        mem=24000
    params:
        chrom="chr{chr}",
        base_tile_size="100"
    script:
        "scripts/digest_chrom_depth.R"


rule plot_digest:
    input:
        "alignability/data_digest/chr{chr}.rda"
    output:
        "alignability/data_plots/chr{chr}.{resolution}.svg",
        "alignability/data_plots/chr{chr}.{resolution}.pdf"
    resources:
        mem=8000
    params:
        "{resolution}"
    script:
        "scripts/plot_chrom_depth.R"


rule plot_bin_classes:
    input:
        expand("alignability/data_digest/chr{chr}.rda", chr=chrs)
    output:
        expand("alignability/plots/chromosome_bin_classes_heatmap.{output}",
            output=['svg', 'pdf', 'jpeg']),
        expand("alignability/plots/chromosome_bin_classes_barplot.{output}",
            output=['svg', 'pdf'])
    resources:
        mem=40000
    log:
        "alignability/plots/chromosome_bin_classes.log"
    script:
        "scripts/plot_bin_classes.R"
