# vim: syntax=python
#
# It doesn't seem possible to make the standard scan2_call_mutations rule
# create all output .rda files (one per single cell) for each donor because
# the donor is a wildcard and outputs cannot depend on wildcards.  Further,
# since one invocation of SCAN2 creates all such outputs per donor, it would
# be incorrect to allow tools further down the pipeline to ask for each
# individual output file.
#
# Using modules here as a workaround.
#
# ------------------ THIS FILE IS AUTOMATICALLY GENERATED -------------------


module ginkgo_run_1278:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_1278 as ginkgo_run_1278 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/1278/{sample}.bed_mapped",
            sample=list(bams['1278']['single_cell'].keys()) + list(bams['1278']['bulk'].keys())),
    log:
        "ginkgo/1278/ginkgo.log"
    benchmark:
        "ginkgo/1278/ginkgo_benchmark.txt"
    output:
        "ginkgo/1278/CNV1",
        "ginkgo/1278/CNV2",
        "ginkgo/1278/SegBreaks",
        "ginkgo/1278/SegCopy",
        "ginkgo/1278/SegFixed",
        "ginkgo/1278/SegNorm",
        "ginkgo/1278/SegStats",
        "ginkgo/1278/data",
        "ginkgo/1278/results.txt",
        "ginkgo/1278/status.xml",
        temp("ginkgo/1278/ploidyDummy.txt"),
        temp("ginkgo/1278/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/1278/{sample}_{plottype}.jpeg',
            sample=list(bams['1278']['single_cell'].keys()) + list(bams['1278']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/1278"

ruleorder: ginkgo_run_1278 > ginkgo_run



module ginkgo_run_1465:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_1465 as ginkgo_run_1465 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/1465/{sample}.bed_mapped",
            sample=list(bams['1465']['single_cell'].keys()) + list(bams['1465']['bulk'].keys())),
    log:
        "ginkgo/1465/ginkgo.log"
    benchmark:
        "ginkgo/1465/ginkgo_benchmark.txt"
    output:
        "ginkgo/1465/CNV1",
        "ginkgo/1465/CNV2",
        "ginkgo/1465/SegBreaks",
        "ginkgo/1465/SegCopy",
        "ginkgo/1465/SegFixed",
        "ginkgo/1465/SegNorm",
        "ginkgo/1465/SegStats",
        "ginkgo/1465/data",
        "ginkgo/1465/results.txt",
        "ginkgo/1465/status.xml",
        temp("ginkgo/1465/ploidyDummy.txt"),
        temp("ginkgo/1465/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/1465/{sample}_{plottype}.jpeg',
            sample=list(bams['1465']['single_cell'].keys()) + list(bams['1465']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/1465"

ruleorder: ginkgo_run_1465 > ginkgo_run



module ginkgo_run_4638:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_4638 as ginkgo_run_4638 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/4638/{sample}.bed_mapped",
            sample=list(bams['4638']['single_cell'].keys()) + list(bams['4638']['bulk'].keys())),
    log:
        "ginkgo/4638/ginkgo.log"
    benchmark:
        "ginkgo/4638/ginkgo_benchmark.txt"
    output:
        "ginkgo/4638/CNV1",
        "ginkgo/4638/CNV2",
        "ginkgo/4638/SegBreaks",
        "ginkgo/4638/SegCopy",
        "ginkgo/4638/SegFixed",
        "ginkgo/4638/SegNorm",
        "ginkgo/4638/SegStats",
        "ginkgo/4638/data",
        "ginkgo/4638/results.txt",
        "ginkgo/4638/status.xml",
        temp("ginkgo/4638/ploidyDummy.txt"),
        temp("ginkgo/4638/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/4638/{sample}_{plottype}.jpeg',
            sample=list(bams['4638']['single_cell'].keys()) + list(bams['4638']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/4638"

ruleorder: ginkgo_run_4638 > ginkgo_run



module ginkgo_run_4643:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_4643 as ginkgo_run_4643 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/4643/{sample}.bed_mapped",
            sample=list(bams['4643']['single_cell'].keys()) + list(bams['4643']['bulk'].keys())),
    log:
        "ginkgo/4643/ginkgo.log"
    benchmark:
        "ginkgo/4643/ginkgo_benchmark.txt"
    output:
        "ginkgo/4643/CNV1",
        "ginkgo/4643/CNV2",
        "ginkgo/4643/SegBreaks",
        "ginkgo/4643/SegCopy",
        "ginkgo/4643/SegFixed",
        "ginkgo/4643/SegNorm",
        "ginkgo/4643/SegStats",
        "ginkgo/4643/data",
        "ginkgo/4643/results.txt",
        "ginkgo/4643/status.xml",
        temp("ginkgo/4643/ploidyDummy.txt"),
        temp("ginkgo/4643/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/4643/{sample}_{plottype}.jpeg',
            sample=list(bams['4643']['single_cell'].keys()) + list(bams['4643']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/4643"

ruleorder: ginkgo_run_4643 > ginkgo_run



module ginkgo_run_5087:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_5087 as ginkgo_run_5087 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/5087/{sample}.bed_mapped",
            sample=list(bams['5087']['single_cell'].keys()) + list(bams['5087']['bulk'].keys())),
    log:
        "ginkgo/5087/ginkgo.log"
    benchmark:
        "ginkgo/5087/ginkgo_benchmark.txt"
    output:
        "ginkgo/5087/CNV1",
        "ginkgo/5087/CNV2",
        "ginkgo/5087/SegBreaks",
        "ginkgo/5087/SegCopy",
        "ginkgo/5087/SegFixed",
        "ginkgo/5087/SegNorm",
        "ginkgo/5087/SegStats",
        "ginkgo/5087/data",
        "ginkgo/5087/results.txt",
        "ginkgo/5087/status.xml",
        temp("ginkgo/5087/ploidyDummy.txt"),
        temp("ginkgo/5087/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/5087/{sample}_{plottype}.jpeg',
            sample=list(bams['5087']['single_cell'].keys()) + list(bams['5087']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/5087"

ruleorder: ginkgo_run_5087 > ginkgo_run



module ginkgo_run_5171:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_5171 as ginkgo_run_5171 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/5171/{sample}.bed_mapped",
            sample=list(bams['5171']['single_cell'].keys()) + list(bams['5171']['bulk'].keys())),
    log:
        "ginkgo/5171/ginkgo.log"
    benchmark:
        "ginkgo/5171/ginkgo_benchmark.txt"
    output:
        "ginkgo/5171/CNV1",
        "ginkgo/5171/CNV2",
        "ginkgo/5171/SegBreaks",
        "ginkgo/5171/SegCopy",
        "ginkgo/5171/SegFixed",
        "ginkgo/5171/SegNorm",
        "ginkgo/5171/SegStats",
        "ginkgo/5171/data",
        "ginkgo/5171/results.txt",
        "ginkgo/5171/status.xml",
        temp("ginkgo/5171/ploidyDummy.txt"),
        temp("ginkgo/5171/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/5171/{sample}_{plottype}.jpeg',
            sample=list(bams['5171']['single_cell'].keys()) + list(bams['5171']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/5171"

ruleorder: ginkgo_run_5171 > ginkgo_run



module ginkgo_run_5219:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_5219 as ginkgo_run_5219 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/5219/{sample}.bed_mapped",
            sample=list(bams['5219']['single_cell'].keys()) + list(bams['5219']['bulk'].keys())),
    log:
        "ginkgo/5219/ginkgo.log"
    benchmark:
        "ginkgo/5219/ginkgo_benchmark.txt"
    output:
        "ginkgo/5219/CNV1",
        "ginkgo/5219/CNV2",
        "ginkgo/5219/SegBreaks",
        "ginkgo/5219/SegCopy",
        "ginkgo/5219/SegFixed",
        "ginkgo/5219/SegNorm",
        "ginkgo/5219/SegStats",
        "ginkgo/5219/data",
        "ginkgo/5219/results.txt",
        "ginkgo/5219/status.xml",
        temp("ginkgo/5219/ploidyDummy.txt"),
        temp("ginkgo/5219/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/5219/{sample}_{plottype}.jpeg',
            sample=list(bams['5219']['single_cell'].keys()) + list(bams['5219']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/5219"

ruleorder: ginkgo_run_5219 > ginkgo_run



module ginkgo_run_5559:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_5559 as ginkgo_run_5559 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/5559/{sample}.bed_mapped",
            sample=list(bams['5559']['single_cell'].keys()) + list(bams['5559']['bulk'].keys())),
    log:
        "ginkgo/5559/ginkgo.log"
    benchmark:
        "ginkgo/5559/ginkgo_benchmark.txt"
    output:
        "ginkgo/5559/CNV1",
        "ginkgo/5559/CNV2",
        "ginkgo/5559/SegBreaks",
        "ginkgo/5559/SegCopy",
        "ginkgo/5559/SegFixed",
        "ginkgo/5559/SegNorm",
        "ginkgo/5559/SegStats",
        "ginkgo/5559/data",
        "ginkgo/5559/results.txt",
        "ginkgo/5559/status.xml",
        temp("ginkgo/5559/ploidyDummy.txt"),
        temp("ginkgo/5559/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/5559/{sample}_{plottype}.jpeg',
            sample=list(bams['5559']['single_cell'].keys()) + list(bams['5559']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/5559"

ruleorder: ginkgo_run_5559 > ginkgo_run



module ginkgo_run_5657:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_5657 as ginkgo_run_5657 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/5657/{sample}.bed_mapped",
            sample=list(bams['5657']['single_cell'].keys()) + list(bams['5657']['bulk'].keys())),
    log:
        "ginkgo/5657/ginkgo.log"
    benchmark:
        "ginkgo/5657/ginkgo_benchmark.txt"
    output:
        "ginkgo/5657/CNV1",
        "ginkgo/5657/CNV2",
        "ginkgo/5657/SegBreaks",
        "ginkgo/5657/SegCopy",
        "ginkgo/5657/SegFixed",
        "ginkgo/5657/SegNorm",
        "ginkgo/5657/SegStats",
        "ginkgo/5657/data",
        "ginkgo/5657/results.txt",
        "ginkgo/5657/status.xml",
        temp("ginkgo/5657/ploidyDummy.txt"),
        temp("ginkgo/5657/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/5657/{sample}_{plottype}.jpeg',
            sample=list(bams['5657']['single_cell'].keys()) + list(bams['5657']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/5657"

ruleorder: ginkgo_run_5657 > ginkgo_run



module ginkgo_run_5817:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_5817 as ginkgo_run_5817 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/5817/{sample}.bed_mapped",
            sample=list(bams['5817']['single_cell'].keys()) + list(bams['5817']['bulk'].keys())),
    log:
        "ginkgo/5817/ginkgo.log"
    benchmark:
        "ginkgo/5817/ginkgo_benchmark.txt"
    output:
        "ginkgo/5817/CNV1",
        "ginkgo/5817/CNV2",
        "ginkgo/5817/SegBreaks",
        "ginkgo/5817/SegCopy",
        "ginkgo/5817/SegFixed",
        "ginkgo/5817/SegNorm",
        "ginkgo/5817/SegStats",
        "ginkgo/5817/data",
        "ginkgo/5817/results.txt",
        "ginkgo/5817/status.xml",
        temp("ginkgo/5817/ploidyDummy.txt"),
        temp("ginkgo/5817/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/5817/{sample}_{plottype}.jpeg',
            sample=list(bams['5817']['single_cell'].keys()) + list(bams['5817']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/5817"

ruleorder: ginkgo_run_5817 > ginkgo_run



module ginkgo_run_5823:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_5823 as ginkgo_run_5823 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/5823/{sample}.bed_mapped",
            sample=list(bams['5823']['single_cell'].keys()) + list(bams['5823']['bulk'].keys())),
    log:
        "ginkgo/5823/ginkgo.log"
    benchmark:
        "ginkgo/5823/ginkgo_benchmark.txt"
    output:
        "ginkgo/5823/CNV1",
        "ginkgo/5823/CNV2",
        "ginkgo/5823/SegBreaks",
        "ginkgo/5823/SegCopy",
        "ginkgo/5823/SegFixed",
        "ginkgo/5823/SegNorm",
        "ginkgo/5823/SegStats",
        "ginkgo/5823/data",
        "ginkgo/5823/results.txt",
        "ginkgo/5823/status.xml",
        temp("ginkgo/5823/ploidyDummy.txt"),
        temp("ginkgo/5823/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/5823/{sample}_{plottype}.jpeg',
            sample=list(bams['5823']['single_cell'].keys()) + list(bams['5823']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/5823"

ruleorder: ginkgo_run_5823 > ginkgo_run



module ginkgo_run_5871:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_5871 as ginkgo_run_5871 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/5871/{sample}.bed_mapped",
            sample=list(bams['5871']['single_cell'].keys()) + list(bams['5871']['bulk'].keys())),
    log:
        "ginkgo/5871/ginkgo.log"
    benchmark:
        "ginkgo/5871/ginkgo_benchmark.txt"
    output:
        "ginkgo/5871/CNV1",
        "ginkgo/5871/CNV2",
        "ginkgo/5871/SegBreaks",
        "ginkgo/5871/SegCopy",
        "ginkgo/5871/SegFixed",
        "ginkgo/5871/SegNorm",
        "ginkgo/5871/SegStats",
        "ginkgo/5871/data",
        "ginkgo/5871/results.txt",
        "ginkgo/5871/status.xml",
        temp("ginkgo/5871/ploidyDummy.txt"),
        temp("ginkgo/5871/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/5871/{sample}_{plottype}.jpeg',
            sample=list(bams['5871']['single_cell'].keys()) + list(bams['5871']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/5871"

ruleorder: ginkgo_run_5871 > ginkgo_run



module ginkgo_run_936:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_936 as ginkgo_run_936 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/936/{sample}.bed_mapped",
            sample=list(bams['936']['single_cell'].keys()) + list(bams['936']['bulk'].keys())),
    log:
        "ginkgo/936/ginkgo.log"
    benchmark:
        "ginkgo/936/ginkgo_benchmark.txt"
    output:
        "ginkgo/936/CNV1",
        "ginkgo/936/CNV2",
        "ginkgo/936/SegBreaks",
        "ginkgo/936/SegCopy",
        "ginkgo/936/SegFixed",
        "ginkgo/936/SegNorm",
        "ginkgo/936/SegStats",
        "ginkgo/936/data",
        "ginkgo/936/results.txt",
        "ginkgo/936/status.xml",
        temp("ginkgo/936/ploidyDummy.txt"),
        temp("ginkgo/936/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/936/{sample}_{plottype}.jpeg',
            sample=list(bams['936']['single_cell'].keys()) + list(bams['936']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/936"

ruleorder: ginkgo_run_936 > ginkgo_run



module ginkgo_run_CON1901106:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_CON1901106 as ginkgo_run_CON1901106 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/CON1901106/{sample}.bed_mapped",
            sample=list(bams['CON1901106']['single_cell'].keys()) + list(bams['CON1901106']['bulk'].keys())),
    log:
        "ginkgo/CON1901106/ginkgo.log"
    benchmark:
        "ginkgo/CON1901106/ginkgo_benchmark.txt"
    output:
        "ginkgo/CON1901106/CNV1",
        "ginkgo/CON1901106/CNV2",
        "ginkgo/CON1901106/SegBreaks",
        "ginkgo/CON1901106/SegCopy",
        "ginkgo/CON1901106/SegFixed",
        "ginkgo/CON1901106/SegNorm",
        "ginkgo/CON1901106/SegStats",
        "ginkgo/CON1901106/data",
        "ginkgo/CON1901106/results.txt",
        "ginkgo/CON1901106/status.xml",
        temp("ginkgo/CON1901106/ploidyDummy.txt"),
        temp("ginkgo/CON1901106/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/CON1901106/{sample}_{plottype}.jpeg',
            sample=list(bams['CON1901106']['single_cell'].keys()) + list(bams['CON1901106']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/CON1901106"

ruleorder: ginkgo_run_CON1901106 > ginkgo_run



module ginkgo_run_CON301159:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_CON301159 as ginkgo_run_CON301159 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/CON301159/{sample}.bed_mapped",
            sample=list(bams['CON301159']['single_cell'].keys()) + list(bams['CON301159']['bulk'].keys())),
    log:
        "ginkgo/CON301159/ginkgo.log"
    benchmark:
        "ginkgo/CON301159/ginkgo_benchmark.txt"
    output:
        "ginkgo/CON301159/CNV1",
        "ginkgo/CON301159/CNV2",
        "ginkgo/CON301159/SegBreaks",
        "ginkgo/CON301159/SegCopy",
        "ginkgo/CON301159/SegFixed",
        "ginkgo/CON301159/SegNorm",
        "ginkgo/CON301159/SegStats",
        "ginkgo/CON301159/data",
        "ginkgo/CON301159/results.txt",
        "ginkgo/CON301159/status.xml",
        temp("ginkgo/CON301159/ploidyDummy.txt"),
        temp("ginkgo/CON301159/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/CON301159/{sample}_{plottype}.jpeg',
            sample=list(bams['CON301159']['single_cell'].keys()) + list(bams['CON301159']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/CON301159"

ruleorder: ginkgo_run_CON301159 > ginkgo_run



module ginkgo_run_UMB4976:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_UMB4976 as ginkgo_run_UMB4976 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/UMB4976/{sample}.bed_mapped",
            sample=list(bams['UMB4976']['single_cell'].keys()) + list(bams['UMB4976']['bulk'].keys())),
    log:
        "ginkgo/UMB4976/ginkgo.log"
    benchmark:
        "ginkgo/UMB4976/ginkgo_benchmark.txt"
    output:
        "ginkgo/UMB4976/CNV1",
        "ginkgo/UMB4976/CNV2",
        "ginkgo/UMB4976/SegBreaks",
        "ginkgo/UMB4976/SegCopy",
        "ginkgo/UMB4976/SegFixed",
        "ginkgo/UMB4976/SegNorm",
        "ginkgo/UMB4976/SegStats",
        "ginkgo/UMB4976/data",
        "ginkgo/UMB4976/results.txt",
        "ginkgo/UMB4976/status.xml",
        temp("ginkgo/UMB4976/ploidyDummy.txt"),
        temp("ginkgo/UMB4976/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/UMB4976/{sample}_{plottype}.jpeg',
            sample=list(bams['UMB4976']['single_cell'].keys()) + list(bams['UMB4976']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/UMB4976"

ruleorder: ginkgo_run_UMB4976 > ginkgo_run



module ginkgo_run_UMB5451:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_UMB5451 as ginkgo_run_UMB5451 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/UMB5451/{sample}.bed_mapped",
            sample=list(bams['UMB5451']['single_cell'].keys()) + list(bams['UMB5451']['bulk'].keys())),
    log:
        "ginkgo/UMB5451/ginkgo.log"
    benchmark:
        "ginkgo/UMB5451/ginkgo_benchmark.txt"
    output:
        "ginkgo/UMB5451/CNV1",
        "ginkgo/UMB5451/CNV2",
        "ginkgo/UMB5451/SegBreaks",
        "ginkgo/UMB5451/SegCopy",
        "ginkgo/UMB5451/SegFixed",
        "ginkgo/UMB5451/SegNorm",
        "ginkgo/UMB5451/SegStats",
        "ginkgo/UMB5451/data",
        "ginkgo/UMB5451/results.txt",
        "ginkgo/UMB5451/status.xml",
        temp("ginkgo/UMB5451/ploidyDummy.txt"),
        temp("ginkgo/UMB5451/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/UMB5451/{sample}_{plottype}.jpeg',
            sample=list(bams['UMB5451']['single_cell'].keys()) + list(bams['UMB5451']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/UMB5451"

ruleorder: ginkgo_run_UMB5451 > ginkgo_run



module ginkgo_run_UMB5572:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_UMB5572 as ginkgo_run_UMB5572 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/UMB5572/{sample}.bed_mapped",
            sample=list(bams['UMB5572']['single_cell'].keys()) + list(bams['UMB5572']['bulk'].keys())),
    log:
        "ginkgo/UMB5572/ginkgo.log"
    benchmark:
        "ginkgo/UMB5572/ginkgo_benchmark.txt"
    output:
        "ginkgo/UMB5572/CNV1",
        "ginkgo/UMB5572/CNV2",
        "ginkgo/UMB5572/SegBreaks",
        "ginkgo/UMB5572/SegCopy",
        "ginkgo/UMB5572/SegFixed",
        "ginkgo/UMB5572/SegNorm",
        "ginkgo/UMB5572/SegStats",
        "ginkgo/UMB5572/data",
        "ginkgo/UMB5572/results.txt",
        "ginkgo/UMB5572/status.xml",
        temp("ginkgo/UMB5572/ploidyDummy.txt"),
        temp("ginkgo/UMB5572/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/UMB5572/{sample}_{plottype}.jpeg',
            sample=list(bams['UMB5572']['single_cell'].keys()) + list(bams['UMB5572']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/UMB5572"

ruleorder: ginkgo_run_UMB5572 > ginkgo_run



module ginkgo_run_UMB5666:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_UMB5666 as ginkgo_run_UMB5666 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/UMB5666/{sample}.bed_mapped",
            sample=list(bams['UMB5666']['single_cell'].keys()) + list(bams['UMB5666']['bulk'].keys())),
    log:
        "ginkgo/UMB5666/ginkgo.log"
    benchmark:
        "ginkgo/UMB5666/ginkgo_benchmark.txt"
    output:
        "ginkgo/UMB5666/CNV1",
        "ginkgo/UMB5666/CNV2",
        "ginkgo/UMB5666/SegBreaks",
        "ginkgo/UMB5666/SegCopy",
        "ginkgo/UMB5666/SegFixed",
        "ginkgo/UMB5666/SegNorm",
        "ginkgo/UMB5666/SegStats",
        "ginkgo/UMB5666/data",
        "ginkgo/UMB5666/results.txt",
        "ginkgo/UMB5666/status.xml",
        temp("ginkgo/UMB5666/ploidyDummy.txt"),
        temp("ginkgo/UMB5666/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/UMB5666/{sample}_{plottype}.jpeg',
            sample=list(bams['UMB5666']['single_cell'].keys()) + list(bams['UMB5666']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/UMB5666"

ruleorder: ginkgo_run_UMB5666 > ginkgo_run



module ginkgo_run_UMB5943:
    snakefile: "snakefile.ginkgo"

use rule ginkgo_run from ginkgo_run_UMB5943 as ginkgo_run_UMB5943 with:
    input:
        mapped_beds=lambda wildcards: expand("ginkgo/UMB5943/{sample}.bed_mapped",
            sample=list(bams['UMB5943']['single_cell'].keys()) + list(bams['UMB5943']['bulk'].keys())),
    log:
        "ginkgo/UMB5943/ginkgo.log"
    benchmark:
        "ginkgo/UMB5943/ginkgo_benchmark.txt"
    output:
        "ginkgo/UMB5943/CNV1",
        "ginkgo/UMB5943/CNV2",
        "ginkgo/UMB5943/SegBreaks",
        "ginkgo/UMB5943/SegCopy",
        "ginkgo/UMB5943/SegFixed",
        "ginkgo/UMB5943/SegNorm",
        "ginkgo/UMB5943/SegStats",
        "ginkgo/UMB5943/data",
        "ginkgo/UMB5943/results.txt",
        "ginkgo/UMB5943/status.xml",
        temp("ginkgo/UMB5943/ploidyDummy.txt"),
        temp("ginkgo/UMB5943/refDummy.bed_mapped"),
        plots=protected(expand('ginkgo/UMB5943/{sample}_{plottype}.jpeg',
            sample=list(bams['UMB5943']['single_cell'].keys()) + list(bams['UMB5943']['bulk'].keys()),
            plottype=[ 'CN', 'GC', 'SoS', 'counts', 'dist', 'hist', 'lorenz' ]))
    params:
        workdir="ginkgo/UMB5943"

ruleorder: ginkgo_run_UMB5943 > ginkgo_run

