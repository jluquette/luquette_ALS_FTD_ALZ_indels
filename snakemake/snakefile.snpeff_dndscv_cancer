# vim: syntax=python

rule pcawg_snpeff:
    input:
        "data/pcawg/cancer_vcfs/{tumor}.vcf"
    output:
        "snpeff/cancer_vcfs/{tumor}.snpeff.vcf"
    log:
        "snpeff/cancer_vcfs/{tumor}.snpeff.log"
    resources:
        mem_mb=8000
    shell:
        """
        snakemake/scripts/run_snpeff_pcawg.sh {input} {output} > {log} 2>&1
        """


# Same as above, but input format is different. We also add some
# extra VCF tags to the normal cell VCFs.
ruleorder: singlecell_snpeff > pcawg_snpeff
rule singlecell_snpeff:
    input:
        "vcfs/{group}___FILTERED___{qualtype}.vcf"
    output:
        tmp=temp("snpeff/{group}___FILTERED___{qualtype}.vcf.tmp"),
        vcf="snpeff/{group}___FILTERED___{qualtype}.vcf"
    log:
        "snpeff/{group}___FILTERED___{qualtype}.snpeff.log"
    params:
        group='{group}'
    resources:
        mem_mb=8000
    shell:
        """
        awk 'BEGIN {{ OFS="\t"; }} {{ $8 = "TType={params.group};Origin=.;Sample=."; print $0 }}' {input} > {output.tmp} \
            | snakemake/scripts/run_snpeff_pcawg.sh {output.tmp} {output.vcf} > {log} 2>&1
        """


rule parse_pcawg_snpeff:
    input:
        "snpeff/cancer_vcfs/{tumor}.snpeff.vcf"
    output:
        "cancer_genes/gene_mutations/{tumor}.txt"
    resources:
        mem_mb=8000
    shell:
        """
        snakemake/scripts/parse_pcawg_snpeff.sh {input} > {output}
        """


# Same as above but input file names structure doesn't conform to tumor file names.
ruleorder: parse_singlecell_snpeff > parse_pcawg_snpeff
rule parse_singlecell_snpeff:
    input:
        "snpeff/{group}___FILTERED___{qualtype}.vcf"
    output:
        "cancer_genes/gene_mutations/{group}___{qualtype}.txt"
    resources:
        mem_mb=8000
    shell:
        """
        snakemake/scripts/parse_pcawg_snpeff.sh {input} > {output}
        """


rule scatter_pcawg_gene_mutation_odds_ratios:
    input:
        neuron="cancer_genes/gene_mutations/{group1}___AB.txt",
        oligo="cancer_genes/gene_mutations/{group2}___AB.txt",
        tumor="cancer_genes/gene_mutations/{tumor}.txt" #,
        # omitting the bed file falls back to SnpEff, meaning no gene filtration
        # The SnpEff run script is configured to exclude upstream/downstream/integenic regions.
        #genes_bed='data/gtex/gencode.v26lift37.annotation.GTEX_COLLAPSED.genes_only.protein_coding.bed',
    output:
        rda="cancer_genes/odds_ratios/{group1}___vs___{group2}/{tumor}.rda"
    log:
        "cancer_genes/odds_ratios/{group1}___vs___{group2}/{tumor}.log"
    benchmark:
        "cancer_genes/odds_ratios/{group1}___vs___{group2}/{tumor}.benchmark.txt"
    resources:
        mem_mb=20000
    shell:
        """
        snakemake/scripts/pcawg_gene_odds_ratio.R \
            {input.tumor} {input.neuron} {input.oligo} {output.rda} > {log} 2>&1
        """


rule gather_pcawg_gene_mutation_odds_ratios:
    input:
        cancer_ors=expand('cancer_genes/odds_ratios/{{group1}}___vs___{{group2}}/{tumor}.rda',
            tumor=config['pcawg_tumors'])
    output:
        csv="cancer_genes/odds_ratios/{group1}___vs___{group2}.csv"
    log:
        "cancer_genes/odds_ratios/{group1}___vs___{group2}.log"
    localrule: True
    threads: 1
    resources:
        mem_mb=4000,
        localjob=1
    script:
        "scripts/pcawg_gene_collect_odds_ratios.R"


rule cancer_density_correlation:
    input:
        muts="tables/{group}___FILTERED_mut___A.csv",
        tiles="alignability/genome_tiles/genome_tiles_1000000binsize.bed",
        # quantile is ignored. raw scores used.
        qbeds=expand('enrichment/cancer_snvdens/quantile/qbed/cancer_snvdens___{tumor}___normdens.1000000binsize_10quantiles.qbed',
            tumor=config['pcawg_tumors'])
    output:
        csv="enrichment/cancer_snvdens/correlation/{group}___A.csv"
    log:
        "enrichment/cancer_snvdens/correlation/{group}___A.log"
    benchmark:
        "enrichment/cancer_snvdens/correlation/{group}___A.benchmark.txt"
    threads: 1
    resources:
        mem_mb=4000
    script:
        "scripts/qbed_correlation.R"


# This text file slightly differs from VCF in format: the columns are
# named as expected by dndscv
rule run_dndscv_cancer:
    input:
        muts="data/cancer_snvdens/snvs/{tumor}.txt"
    output:
        rda="dndscv/{tumor}.rda",
        csv="dndscv/{tumor}.csv"
    params:
        # add the cancer_ prefix so we know what files came from tumors without
        # parsing the names directly
        sampletag="cancer_{tumor}"
    log:
        "dndscv/{tumor}.log"
    resources:
        mem_mb=16000
    script:
        "scripts/run_dndscv.R"


# same rule as above but uses mutations from our cells,
# which requires a different input format
ruleorder: run_dndscv > run_dndscv_cancer
rule run_dndscv:
    input:
        muts="tables/{qualtype}/{group}.csv"
    output:
        rda="dndscv/{group}___{qualtype}.rda",
        csv="dndscv/{group}___{qualtype}.csv"
    params:
        sampletag="{group}_{qualtype}"
    log:
        "cancer_genes/dndscv/{group}___{qualtype}.log"
    resources:
        mem_mb=8000
    script:
        "scripts/run_dndscv.R"


if 'make_pcawg_metadata' not in config.keys():
    pcawg_meta = pd.read_csv('metadata/pcawg_metadata.csv')
    pcawg_tumors = sorted(set(pcawg_meta['tumor']))
else:
    pcawg_tumors = []

rule make_dndscv_table:
    input:
        csvs=expand('dndscv/{group}___{qualtype}.csv',
                      group=[ 'pta_neuron', 'pta_oligo', 'mda_gfap', 'mda_sox10' ], #, 'mda_gfap_elderly', 'mda_sox10_elderly', 'oligo_mdapta' ],
                      qualtype=[ 'A', 'AB' ]) +
             expand('dndscv/{tumor}.csv', tumor=pcawg_tumors)
    output:
        csv='dndscv/dndscv_table.csv'
    params:
        sampletags=expand('{group}_{qualtype}',
                      group=[ 'pta_neuron', 'pta_oligo', 'mda_gfap', 'mda_sox10' ], #, 'mda_gfap_elderly', 'mda_sox10_elderly', 'oligo_mdapta' ],
                      qualtype = [ 'A', 'AB' ]) +
                   expand('cancer_{tumor}', tumor=pcawg_tumors)
    log:
        'dndscv/dndscv_table.log'
    resources:
        mem_mb=16000
    script:
        "scripts/combine_dndscv_tables.R"
