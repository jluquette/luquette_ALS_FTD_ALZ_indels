# vim: syntax=python



# scRNA-seq expression mapped to the GTEx gene model
# Min. signal coverage: _mc02
enrichment_scrnaseq_expression_mc02_config = dict(
    **{ 'output_dir': 'enrichment/scrnaseq_expression_mc02',
        'SIGNAL_MANIFEST': 'manifests/SCRNASEQ_EXPRESSION.MANIFEST' },
    **enrichment_config
)

module enrichment_scrnaseq_expression_mc02:
    snakefile: "snakefile.enrichment"
    config: enrichment_scrnaseq_expression_mc02_config

use rule * from enrichment_scrnaseq_expression_mc02 as enrichment_scrnaseq_expression_mc02_*

use rule make_qbed_from_bigwig from enrichment_scrnaseq_expression_mc02 as enrichment_scrnaseq_expression_mc02_make_qbed_from_bigwig with:
    params:
        **enrichment_scrnaseq_expression_mc02.make_qbed_from_bigwig_params(0.2)

use rule enrichment_plot from enrichment_scrnaseq_expression_mc02 as enrichment_scrnaseq_expression_mc02_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='donor,selection,celltype'
    output:
        expand('enrichment/scrnaseq_expression_mc02/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scrnaseq_expression_mc02/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_scrnaseq_expression_mc02 as enrichment_scrnaseq_expression_mc02_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='donor,selection,celltype'
    output:
        expand('enrichment/scrnaseq_expression_mc02/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scrnaseq_expression_mc02/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'


# Min. signal coverage: _mc04
enrichment_scrnaseq_expression_mc04_config = dict(
    **{ 'output_dir': 'enrichment/scrnaseq_expression_mc04',
        'SIGNAL_MANIFEST': 'manifests/SCRNASEQ_EXPRESSION.MANIFEST' },
    **enrichment_config
)

module enrichment_scrnaseq_expression_mc04:
    snakefile: "snakefile.enrichment"
    config: enrichment_scrnaseq_expression_mc04_config

use rule * from enrichment_scrnaseq_expression_mc04 as enrichment_scrnaseq_expression_mc04_*

use rule make_qbed_from_bigwig from enrichment_scrnaseq_expression_mc04 as enrichment_scrnaseq_expression_mc04_make_qbed_from_bigwig with:
    params:
        **enrichment_scrnaseq_expression_mc04.make_qbed_from_bigwig_params(0.4)

use rule enrichment_plot from enrichment_scrnaseq_expression_mc04 as enrichment_scrnaseq_expression_mc04_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='donor,selection,celltype'
    output:
        expand('enrichment/scrnaseq_expression_mc04/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scrnaseq_expression_mc04/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_scrnaseq_expression_mc04 as enrichment_scrnaseq_expression_mc04_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='donor,selection,celltype'
    output:
        expand('enrichment/scrnaseq_expression_mc04/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scrnaseq_expression_mc04/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'


# Min. signal coverage: _mc06
enrichment_scrnaseq_expression_mc06_config = dict(
    **{ 'output_dir': 'enrichment/scrnaseq_expression_mc06',
        'SIGNAL_MANIFEST': 'manifests/SCRNASEQ_EXPRESSION.MANIFEST' },
    **enrichment_config
)

module enrichment_scrnaseq_expression_mc06:
    snakefile: "snakefile.enrichment"
    config: enrichment_scrnaseq_expression_mc06_config

use rule * from enrichment_scrnaseq_expression_mc06 as enrichment_scrnaseq_expression_mc06_*

use rule make_qbed_from_bigwig from enrichment_scrnaseq_expression_mc06 as enrichment_scrnaseq_expression_mc06_make_qbed_from_bigwig with:
    params:
        **enrichment_scrnaseq_expression_mc06.make_qbed_from_bigwig_params(0.6)

use rule enrichment_plot from enrichment_scrnaseq_expression_mc06 as enrichment_scrnaseq_expression_mc06_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='donor,selection,celltype'
    output:
        expand('enrichment/scrnaseq_expression_mc06/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scrnaseq_expression_mc06/quantile/{mutclass}.{nquantiles}quantiles.log'


use rule sigenrichment_plot from enrichment_scrnaseq_expression_mc06 as enrichment_scrnaseq_expression_mc06_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='donor,selection,celltype'
    output:
        expand('enrichment/scrnaseq_expression_mc06/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scrnaseq_expression_mc06/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'

# Min. signal coverage: _mc08
enrichment_scrnaseq_expression_mc08_config = dict(
    **{ 'output_dir': 'enrichment/scrnaseq_expression_mc08',
        'SIGNAL_MANIFEST': 'manifests/SCRNASEQ_EXPRESSION.MANIFEST' },
    **enrichment_config
)

module enrichment_scrnaseq_expression_mc08:
    snakefile: "snakefile.enrichment"
    config: enrichment_scrnaseq_expression_mc08_config

use rule * from enrichment_scrnaseq_expression_mc08 as enrichment_scrnaseq_expression_mc08_*

use rule make_qbed_from_bigwig from enrichment_scrnaseq_expression_mc08 as enrichment_scrnaseq_expression_mc08_make_qbed_from_bigwig with:
    params:
        **enrichment_scrnaseq_expression_mc08.make_qbed_from_bigwig_params(0.8)

use rule enrichment_plot from enrichment_scrnaseq_expression_mc08 as enrichment_scrnaseq_expression_mc08_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='donor,selection,celltype'
    output:
        expand('enrichment/scrnaseq_expression_mc08/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scrnaseq_expression_mc08/quantile/{mutclass}.{nquantiles}quantiles.log'

use rule sigenrichment_plot from enrichment_scrnaseq_expression_mc08 as enrichment_scrnaseq_expression_mc08_sigenrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='donor,selection,celltype'
    output:
        expand('enrichment/scrnaseq_expression_mc08/quantile/{{mutclass}}.{{nquantiles}}quantiles_sigenrich.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scrnaseq_expression_mc08/quantile/{mutclass}.{nquantiles}quantiles_sigenrich.log'



# FOLDCHANGE qbeds. Currently for mc02 and mc08
'''
# Min. signal coverage: _mc02
enrichment_scrnaseq_expression_mc02_foldchange_config = dict(
    **{ 'output_dir': 'enrichment/scrnaseq_expression_mc02_foldchange',
        'SIGNAL_MANIFEST': 'manifests/SCRNASEQ_EXPRESSION_FOLDCHANGE.MANIFEST' },
    **enrichment_config
)

module enrichment_scrnaseq_expression_mc02_foldchange:
    snakefile: "snakefile.enrichment"
    config: enrichment_scrnaseq_expression_mc02_foldchange_config

use rule enrichment_qbed_analysis from enrichment_scrnaseq_expression_mc02_foldchange as enrichment_scrnaseq_expression_mc02_foldchange_enrichment_qbed_analysis

use rule enrichment_plot from enrichment_scrnaseq_expression_mc02_foldchange as enrichment_scrnaseq_expression_mc02_foldchange_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='donor,selection,celltype'
    output:
        expand('enrichment/scrnaseq_expression_mc02_foldchange/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}',
            output=[ 'svg', 'pdf', 'csv' ])
    log:
        'enrichment/scrnaseq_expression_mc02_foldchange/quantile/{mutclass}.{nquantiles}quantiles.log'
'''


# Min. signal coverage: _mc08
enrichment_scrnaseq_expression_mc08_foldchange_config = dict(
    **{ 'output_dir': 'enrichment/scrnaseq_expression_mc08_foldchange',
        'SIGNAL_MANIFEST': 'manifests/SCRNASEQ_EXPRESSION_FOLDCHANGE.MANIFEST' },
    **enrichment_config
)

module enrichment_scrnaseq_expression_mc08_foldchange:
    snakefile: "snakefile.enrichment"
    config: enrichment_scrnaseq_expression_mc08_foldchange_config

use rule enrichment_qbed_analysis from enrichment_scrnaseq_expression_mc08_foldchange as enrichment_scrnaseq_expression_mc08_foldchange_enrichment_qbed_analysis

use rule enrichment_table from enrichment_scrnaseq_expression_mc08_foldchange as enrichment_scrnaseq_expression_mc08_foldchange_enrichment_table

use rule enrichment_plot from enrichment_scrnaseq_expression_mc08_foldchange as enrichment_scrnaseq_expression_mc08_foldchange_enrichment_plot with:
    params:
        ignore='enrichment_grid_R_ignore_none',
        group='donor,selection,celltype'
    output:
        expand('enrichment/scrnaseq_expression_mc08_foldchange/quantile/{{mutclass}}.{{nquantiles}}quantiles.{output}', output=[ 'svg', 'pdf', 'csv' ])
    #log:
        #'enrichment/scrnaseq_expression_mc08_foldchange/quantile/{mutclass}.{nquantiles}quantiles.log'
